Created by PLY version 3.0 (http://www.dabeaz.com/ply)

Unused terminals:

    LBRACKET
    UEXCLAMATION
    ELLIPSIS
    MODULO
    ENUM
    ARROW
    CARET
    SHORT
    SIZEOF
    EQ_SHIFT_RIGHT
    UNSIGNED
    UNION
    SHIFT_LEFT
    DEFAULT
    EQ_CARET
    DOT
    CASE
    REGISTER
    PIPE
    SWITCH
    TILDE
    RBRACKET
    UMINUS
    VOLATILE
    UASTERISK
    CONST
    EQ_PIPE
    EQ_AMPERSAND
    SIGNED
    EQ_SHIFT_LEFT
    QUESTION
    TYPEDEF
    AUTO
    POUND
    STRUCT
    SHIFT_RIGHT
    EQ_MODULO

Grammar

Rule 1     S' -> start
Rule 2     start -> translation_unit
Rule 3     translation_unit -> external_declaration
Rule 4     translation_unit -> translation_unit external_declaration
Rule 5     external_declaration -> function_definition
Rule 6     external_declaration -> declaration
Rule 7     function_definition -> type_specifier declarator compound_statement
Rule 8     function_definition -> STATIC type_specifier declarator compound_statement
Rule 9     declaration -> type_specifier declarator SEMICOLON
Rule 10    declaration -> EXTERN type_specifier declarator SEMICOLON
Rule 11    declaration_list_opt -> empty
Rule 12    declaration_list_opt -> declaration_list
Rule 13    declaration_list -> declaration
Rule 14    declaration_list -> declaration declaration_list
Rule 15    type_specifier -> INT
Rule 16    type_specifier -> CHAR
Rule 17    type_specifier -> empty
Rule 18    type_specifier -> VOID
Rule 19    type_specifier -> FLOAT
Rule 20    type_specifier -> DOUBLE
Rule 21    type_specifier -> LONG
Rule 22    declarator -> direct_declarator
Rule 23    declarator -> expression ASSIGN expression
Rule 24    declarator -> direct_declarator COMMA declarator
Rule 25    declarator -> expression ASSIGN expression COMMA declarator
Rule 26    declarator -> ASTERISK declarator
Rule 27    direct_declarator -> ID
Rule 28    direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 29    direct_declarator -> direct_declarator LPAREN RPAREN
Rule 30    parameter_type_list -> parameter_list
Rule 31    parameter_list -> type_specifier expression
Rule 32    parameter_list -> type_specifier expression COMMA parameter_list
Rule 33    parameter_declaration -> type_specifier declarator
Rule 34    compound_statement -> LBRACE declaration_list_opt statement_list RBRACE
Rule 35    compound_statement -> LBRACE declaration_list_opt RBRACE
Rule 36    statement_list -> statement
Rule 37    statement_list -> statement statement_list
Rule 38    statement -> compound_statement
Rule 39    statement -> jump_statement
Rule 40    statement -> iteration_statement
Rule 41    statement -> selection_statement
Rule 42    statement -> expression_statement
Rule 43    statement -> label
Rule 44    label -> ID COLON
Rule 45    expression_statement -> expression SEMICOLON
Rule 46    expression -> binary_expression
Rule 47    expression -> unary_expression
Rule 48    expression -> primary_expression
Rule 49    expression -> postfix_expression
Rule 50    binary_expression -> expression ASSIGN expression
Rule 51    binary_expression -> expression DOUBLE_PIPE expression
Rule 52    binary_expression -> expression DOUBLE_AMPERSAND expression
Rule 53    binary_expression -> expression EQ expression
Rule 54    binary_expression -> expression NOT_EQ expression
Rule 55    binary_expression -> expression LESS expression
Rule 56    binary_expression -> expression GREATER expression
Rule 57    binary_expression -> expression LESS_EQ expression
Rule 58    binary_expression -> expression GREATER_EQ expression
Rule 59    binary_expression -> expression PLUS expression
Rule 60    binary_expression -> expression MINUS expression
Rule 61    binary_expression -> expression ASTERISK expression
Rule 62    binary_expression -> expression DIV expression
Rule 63    binary_expression -> expression EQ_PLUS expression
Rule 64    binary_expression -> expression EQ_MINUS expression
Rule 65    binary_expression -> expression EQ_TIMES expression
Rule 66    binary_expression -> expression EQ_DIV expression
Rule 67    unary_expression -> PLUS expression
Rule 68    unary_expression -> DOUBLE_PLUS primary_expression
Rule 69    unary_expression -> primary_expression DOUBLE_PLUS
Rule 70    unary_expression -> DOUBLE_MINUS primary_expression
Rule 71    unary_expression -> primary_expression DOUBLE_MINUS
Rule 72    unary_expression -> MINUS expression
Rule 73    unary_expression -> ASTERISK expression
Rule 74    unary_expression -> EXCLAMATION expression
Rule 75    unary_expression -> AMPERSAND expression
Rule 76    postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN
Rule 77    postfix_expression -> primary_expression LPAREN RPAREN
Rule 78    argument_expression_list -> expression
Rule 79    argument_expression_list -> expression COMMA argument_expression_list
Rule 80    primary_expression -> ID
Rule 81    primary_expression -> INUMBER
Rule 82    primary_expression -> FNUMBER
Rule 83    primary_expression -> CHARACTER
Rule 84    primary_expression -> string_literal
Rule 85    primary_expression -> LPAREN expression RPAREN
Rule 86    string_literal -> STRING
Rule 87    jump_statement -> RETURN SEMICOLON
Rule 88    jump_statement -> RETURN expression SEMICOLON
Rule 89    jump_statement -> BREAK SEMICOLON
Rule 90    jump_statement -> CONTINUE SEMICOLON
Rule 91    jump_statement -> GOTO ID SEMICOLON
Rule 92    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 93    iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 94    iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement
Rule 95    selection_statement -> IF LPAREN expression RPAREN statement
Rule 96    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 97    empty -> <empty>

Terminals, with rules where they appear

AMPERSAND            : 74
ARROW                : 
ASSIGN               : 22 24 49
ASTERISK             : 25 60 72
AUTO                 : 
BREAK                : 88
CARET                : 
CASE                 : 
CHAR                 : 15
CHARACTER            : 82
COLON                : 43
COMMA                : 23 24 31 78
CONST                : 
CONTINUE             : 89
DEFAULT              : 
DIV                  : 61
DO                   : 92
DOT                  : 
DOUBLE               : 19
DOUBLE_AMPERSAND     : 51
DOUBLE_MINUS         : 69 70
DOUBLE_PIPE          : 50
DOUBLE_PLUS          : 67 68
ELLIPSIS             : 
ELSE                 : 95
ENUM                 : 
EQ                   : 52
EQ_AMPERSAND         : 
EQ_CARET             : 
EQ_DIV               : 65
EQ_MINUS             : 63
EQ_MODULO            : 
EQ_PIPE              : 
EQ_PLUS              : 62
EQ_SHIFT_LEFT        : 
EQ_SHIFT_RIGHT       : 
EQ_TIMES             : 64
EXCLAMATION          : 73
EXTERN               : 9
FLOAT                : 18
FNUMBER              : 81
FOR                  : 93
GOTO                 : 90
GREATER              : 55
GREATER_EQ           : 57
ID                   : 26 43 79 90
IF                   : 94 95
INT                  : 14
INUMBER              : 80
LBRACE               : 33 34
LBRACKET             : 
LESS                 : 54
LESS_EQ              : 56
LONG                 : 20
LPAREN               : 27 28 75 76 84 91 92 93 94 95
MINUS                : 59 71
MODULO               : 
NOT_EQ               : 53
PIPE                 : 
PLUS                 : 58 66
POUND                : 
QUESTION             : 
RBRACE               : 33 34
RBRACKET             : 
REGISTER             : 
RETURN               : 86 87
RPAREN               : 27 28 75 76 84 91 92 93 94 95
SEMICOLON            : 8 9 44 86 87 88 89 90 92
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
SHORT                : 
SIGNED               : 
SIZEOF               : 
STATIC               : 7
STRING               : 85
STRUCT               : 
SWITCH               : 
TILDE                : 
TYPEDEF              : 
UASTERISK            : 
UEXCLAMATION         : 
UMINUS               : 
UNION                : 
UNSIGNED             : 
VOID                 : 17
VOLATILE             : 
WHILE                : 91 92
error                : 

Nonterminals, with rules where they appear

argument_expression_list : 75 78
binary_expression    : 45
compound_statement   : 6 7 37
declaration          : 5 12 13
declaration_list     : 11 13
declaration_list_opt : 33 34
declarator           : 6 7 8 9 23 24 25 32
direct_declarator    : 21 23 27 28
empty                : 10 16
expression           : 22 22 24 24 30 31 44 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 71 72 73 74 77 78 84 87 91 92 93 94 95
expression_statement : 41 93 93
external_declaration : 2 3
function_definition  : 4
iteration_statement  : 39
jump_statement       : 38
label                : 42
parameter_declaration : 
parameter_list       : 29 31
parameter_type_list  : 27
postfix_expression   : 48
primary_expression   : 47 67 68 69 70 75 76
selection_statement  : 40
start                : 0
statement            : 35 36 91 92 93 94 95 95
statement_list       : 33 36
string_literal       : 83
translation_unit     : 1 3
type_specifier       : 6 7 8 9 30 31 32
unary_expression     : 46

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . translation_unit
    (2) translation_unit -> . external_declaration
    (3) translation_unit -> . translation_unit external_declaration
    (4) external_declaration -> . function_definition
    (5) external_declaration -> . declaration
    (6) function_definition -> . type_specifier declarator compound_statement
    (7) function_definition -> . STATIC type_specifier declarator compound_statement
    (8) declaration -> . type_specifier declarator SEMICOLON
    (9) declaration -> . EXTERN type_specifier declarator SEMICOLON
    (14) type_specifier -> . INT
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . empty
    (17) type_specifier -> . VOID
    (18) type_specifier -> . FLOAT
    (19) type_specifier -> . DOUBLE
    (20) type_specifier -> . LONG
    (96) empty -> .

    STATIC          shift and go to state 11
    EXTERN          shift and go to state 14
    INT             shift and go to state 3
    CHAR            shift and go to state 8
    VOID            shift and go to state 5
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 4
    LONG            shift and go to state 6
    ASTERISK        reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    DOUBLE_PLUS     reduce using rule 96 (empty -> .)
    DOUBLE_MINUS    reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    EXCLAMATION     reduce using rule 96 (empty -> .)
    AMPERSAND       reduce using rule 96 (empty -> .)
    INUMBER         reduce using rule 96 (empty -> .)
    FNUMBER         reduce using rule 96 (empty -> .)
    CHARACTER       reduce using rule 96 (empty -> .)
    LPAREN          reduce using rule 96 (empty -> .)
    STRING          reduce using rule 96 (empty -> .)

    external_declaration           shift and go to state 1
    function_definition            shift and go to state 2
    start                          shift and go to state 9
    type_specifier                 shift and go to state 10
    empty                          shift and go to state 12
    declaration                    shift and go to state 13
    translation_unit               shift and go to state 15

state 1

    (2) translation_unit -> external_declaration .

    STATIC          reduce using rule 2 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 2 (translation_unit -> external_declaration .)
    INT             reduce using rule 2 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> external_declaration .)
    LONG            reduce using rule 2 (translation_unit -> external_declaration .)
    ASTERISK        reduce using rule 2 (translation_unit -> external_declaration .)
    ID              reduce using rule 2 (translation_unit -> external_declaration .)
    PLUS            reduce using rule 2 (translation_unit -> external_declaration .)
    DOUBLE_PLUS     reduce using rule 2 (translation_unit -> external_declaration .)
    DOUBLE_MINUS    reduce using rule 2 (translation_unit -> external_declaration .)
    MINUS           reduce using rule 2 (translation_unit -> external_declaration .)
    EXCLAMATION     reduce using rule 2 (translation_unit -> external_declaration .)
    AMPERSAND       reduce using rule 2 (translation_unit -> external_declaration .)
    INUMBER         reduce using rule 2 (translation_unit -> external_declaration .)
    FNUMBER         reduce using rule 2 (translation_unit -> external_declaration .)
    CHARACTER       reduce using rule 2 (translation_unit -> external_declaration .)
    LPAREN          reduce using rule 2 (translation_unit -> external_declaration .)
    STRING          reduce using rule 2 (translation_unit -> external_declaration .)
    $end            reduce using rule 2 (translation_unit -> external_declaration .)


state 2

    (4) external_declaration -> function_definition .

    STATIC          reduce using rule 4 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 4 (external_declaration -> function_definition .)
    INT             reduce using rule 4 (external_declaration -> function_definition .)
    CHAR            reduce using rule 4 (external_declaration -> function_definition .)
    VOID            reduce using rule 4 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 4 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 4 (external_declaration -> function_definition .)
    LONG            reduce using rule 4 (external_declaration -> function_definition .)
    ASTERISK        reduce using rule 4 (external_declaration -> function_definition .)
    ID              reduce using rule 4 (external_declaration -> function_definition .)
    PLUS            reduce using rule 4 (external_declaration -> function_definition .)
    DOUBLE_PLUS     reduce using rule 4 (external_declaration -> function_definition .)
    DOUBLE_MINUS    reduce using rule 4 (external_declaration -> function_definition .)
    MINUS           reduce using rule 4 (external_declaration -> function_definition .)
    EXCLAMATION     reduce using rule 4 (external_declaration -> function_definition .)
    AMPERSAND       reduce using rule 4 (external_declaration -> function_definition .)
    INUMBER         reduce using rule 4 (external_declaration -> function_definition .)
    FNUMBER         reduce using rule 4 (external_declaration -> function_definition .)
    CHARACTER       reduce using rule 4 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 4 (external_declaration -> function_definition .)
    STRING          reduce using rule 4 (external_declaration -> function_definition .)
    $end            reduce using rule 4 (external_declaration -> function_definition .)


state 3

    (14) type_specifier -> INT .

    ASTERISK        reduce using rule 14 (type_specifier -> INT .)
    ID              reduce using rule 14 (type_specifier -> INT .)
    PLUS            reduce using rule 14 (type_specifier -> INT .)
    DOUBLE_PLUS     reduce using rule 14 (type_specifier -> INT .)
    DOUBLE_MINUS    reduce using rule 14 (type_specifier -> INT .)
    MINUS           reduce using rule 14 (type_specifier -> INT .)
    EXCLAMATION     reduce using rule 14 (type_specifier -> INT .)
    AMPERSAND       reduce using rule 14 (type_specifier -> INT .)
    INUMBER         reduce using rule 14 (type_specifier -> INT .)
    FNUMBER         reduce using rule 14 (type_specifier -> INT .)
    CHARACTER       reduce using rule 14 (type_specifier -> INT .)
    LPAREN          reduce using rule 14 (type_specifier -> INT .)
    STRING          reduce using rule 14 (type_specifier -> INT .)


state 4

    (19) type_specifier -> DOUBLE .

    ASTERISK        reduce using rule 19 (type_specifier -> DOUBLE .)
    ID              reduce using rule 19 (type_specifier -> DOUBLE .)
    PLUS            reduce using rule 19 (type_specifier -> DOUBLE .)
    DOUBLE_PLUS     reduce using rule 19 (type_specifier -> DOUBLE .)
    DOUBLE_MINUS    reduce using rule 19 (type_specifier -> DOUBLE .)
    MINUS           reduce using rule 19 (type_specifier -> DOUBLE .)
    EXCLAMATION     reduce using rule 19 (type_specifier -> DOUBLE .)
    AMPERSAND       reduce using rule 19 (type_specifier -> DOUBLE .)
    INUMBER         reduce using rule 19 (type_specifier -> DOUBLE .)
    FNUMBER         reduce using rule 19 (type_specifier -> DOUBLE .)
    CHARACTER       reduce using rule 19 (type_specifier -> DOUBLE .)
    LPAREN          reduce using rule 19 (type_specifier -> DOUBLE .)
    STRING          reduce using rule 19 (type_specifier -> DOUBLE .)


state 5

    (17) type_specifier -> VOID .

    ASTERISK        reduce using rule 17 (type_specifier -> VOID .)
    ID              reduce using rule 17 (type_specifier -> VOID .)
    PLUS            reduce using rule 17 (type_specifier -> VOID .)
    DOUBLE_PLUS     reduce using rule 17 (type_specifier -> VOID .)
    DOUBLE_MINUS    reduce using rule 17 (type_specifier -> VOID .)
    MINUS           reduce using rule 17 (type_specifier -> VOID .)
    EXCLAMATION     reduce using rule 17 (type_specifier -> VOID .)
    AMPERSAND       reduce using rule 17 (type_specifier -> VOID .)
    INUMBER         reduce using rule 17 (type_specifier -> VOID .)
    FNUMBER         reduce using rule 17 (type_specifier -> VOID .)
    CHARACTER       reduce using rule 17 (type_specifier -> VOID .)
    LPAREN          reduce using rule 17 (type_specifier -> VOID .)
    STRING          reduce using rule 17 (type_specifier -> VOID .)


state 6

    (20) type_specifier -> LONG .

    ASTERISK        reduce using rule 20 (type_specifier -> LONG .)
    ID              reduce using rule 20 (type_specifier -> LONG .)
    PLUS            reduce using rule 20 (type_specifier -> LONG .)
    DOUBLE_PLUS     reduce using rule 20 (type_specifier -> LONG .)
    DOUBLE_MINUS    reduce using rule 20 (type_specifier -> LONG .)
    MINUS           reduce using rule 20 (type_specifier -> LONG .)
    EXCLAMATION     reduce using rule 20 (type_specifier -> LONG .)
    AMPERSAND       reduce using rule 20 (type_specifier -> LONG .)
    INUMBER         reduce using rule 20 (type_specifier -> LONG .)
    FNUMBER         reduce using rule 20 (type_specifier -> LONG .)
    CHARACTER       reduce using rule 20 (type_specifier -> LONG .)
    LPAREN          reduce using rule 20 (type_specifier -> LONG .)
    STRING          reduce using rule 20 (type_specifier -> LONG .)


state 7

    (18) type_specifier -> FLOAT .

    ASTERISK        reduce using rule 18 (type_specifier -> FLOAT .)
    ID              reduce using rule 18 (type_specifier -> FLOAT .)
    PLUS            reduce using rule 18 (type_specifier -> FLOAT .)
    DOUBLE_PLUS     reduce using rule 18 (type_specifier -> FLOAT .)
    DOUBLE_MINUS    reduce using rule 18 (type_specifier -> FLOAT .)
    MINUS           reduce using rule 18 (type_specifier -> FLOAT .)
    EXCLAMATION     reduce using rule 18 (type_specifier -> FLOAT .)
    AMPERSAND       reduce using rule 18 (type_specifier -> FLOAT .)
    INUMBER         reduce using rule 18 (type_specifier -> FLOAT .)
    FNUMBER         reduce using rule 18 (type_specifier -> FLOAT .)
    CHARACTER       reduce using rule 18 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 18 (type_specifier -> FLOAT .)
    STRING          reduce using rule 18 (type_specifier -> FLOAT .)


state 8

    (15) type_specifier -> CHAR .

    ASTERISK        reduce using rule 15 (type_specifier -> CHAR .)
    ID              reduce using rule 15 (type_specifier -> CHAR .)
    PLUS            reduce using rule 15 (type_specifier -> CHAR .)
    DOUBLE_PLUS     reduce using rule 15 (type_specifier -> CHAR .)
    DOUBLE_MINUS    reduce using rule 15 (type_specifier -> CHAR .)
    MINUS           reduce using rule 15 (type_specifier -> CHAR .)
    EXCLAMATION     reduce using rule 15 (type_specifier -> CHAR .)
    AMPERSAND       reduce using rule 15 (type_specifier -> CHAR .)
    INUMBER         reduce using rule 15 (type_specifier -> CHAR .)
    FNUMBER         reduce using rule 15 (type_specifier -> CHAR .)
    CHARACTER       reduce using rule 15 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 15 (type_specifier -> CHAR .)
    STRING          reduce using rule 15 (type_specifier -> CHAR .)


state 9

    (0) S' -> start .



state 10

    (6) function_definition -> type_specifier . declarator compound_statement
    (8) declaration -> type_specifier . declarator SEMICOLON
    (21) declarator -> . direct_declarator
    (22) declarator -> . expression ASSIGN expression
    (23) declarator -> . direct_declarator COMMA declarator
    (24) declarator -> . expression ASSIGN expression COMMA declarator
    (25) declarator -> . ASTERISK declarator
    (26) direct_declarator -> . ID
    (27) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (28) direct_declarator -> . direct_declarator LPAREN RPAREN
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    ASTERISK        shift and go to state 26
    ID              shift and go to state 30
    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    direct_declarator              shift and go to state 25
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    declarator                     shift and go to state 34
    expression                     shift and go to state 35
    string_literal                 shift and go to state 21

state 11

    (7) function_definition -> STATIC . type_specifier declarator compound_statement
    (14) type_specifier -> . INT
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . empty
    (17) type_specifier -> . VOID
    (18) type_specifier -> . FLOAT
    (19) type_specifier -> . DOUBLE
    (20) type_specifier -> . LONG
    (96) empty -> .

    INT             shift and go to state 3
    CHAR            shift and go to state 8
    VOID            shift and go to state 5
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 4
    LONG            shift and go to state 6
    ASTERISK        reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    DOUBLE_PLUS     reduce using rule 96 (empty -> .)
    DOUBLE_MINUS    reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    EXCLAMATION     reduce using rule 96 (empty -> .)
    AMPERSAND       reduce using rule 96 (empty -> .)
    INUMBER         reduce using rule 96 (empty -> .)
    FNUMBER         reduce using rule 96 (empty -> .)
    CHARACTER       reduce using rule 96 (empty -> .)
    LPAREN          reduce using rule 96 (empty -> .)
    STRING          reduce using rule 96 (empty -> .)

    type_specifier                 shift and go to state 37
    empty                          shift and go to state 12

state 12

    (16) type_specifier -> empty .

    ASTERISK        reduce using rule 16 (type_specifier -> empty .)
    ID              reduce using rule 16 (type_specifier -> empty .)
    PLUS            reduce using rule 16 (type_specifier -> empty .)
    DOUBLE_PLUS     reduce using rule 16 (type_specifier -> empty .)
    DOUBLE_MINUS    reduce using rule 16 (type_specifier -> empty .)
    MINUS           reduce using rule 16 (type_specifier -> empty .)
    EXCLAMATION     reduce using rule 16 (type_specifier -> empty .)
    AMPERSAND       reduce using rule 16 (type_specifier -> empty .)
    INUMBER         reduce using rule 16 (type_specifier -> empty .)
    FNUMBER         reduce using rule 16 (type_specifier -> empty .)
    CHARACTER       reduce using rule 16 (type_specifier -> empty .)
    LPAREN          reduce using rule 16 (type_specifier -> empty .)
    STRING          reduce using rule 16 (type_specifier -> empty .)


state 13

    (5) external_declaration -> declaration .

    STATIC          reduce using rule 5 (external_declaration -> declaration .)
    EXTERN          reduce using rule 5 (external_declaration -> declaration .)
    INT             reduce using rule 5 (external_declaration -> declaration .)
    CHAR            reduce using rule 5 (external_declaration -> declaration .)
    VOID            reduce using rule 5 (external_declaration -> declaration .)
    FLOAT           reduce using rule 5 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 5 (external_declaration -> declaration .)
    LONG            reduce using rule 5 (external_declaration -> declaration .)
    ASTERISK        reduce using rule 5 (external_declaration -> declaration .)
    ID              reduce using rule 5 (external_declaration -> declaration .)
    PLUS            reduce using rule 5 (external_declaration -> declaration .)
    DOUBLE_PLUS     reduce using rule 5 (external_declaration -> declaration .)
    DOUBLE_MINUS    reduce using rule 5 (external_declaration -> declaration .)
    MINUS           reduce using rule 5 (external_declaration -> declaration .)
    EXCLAMATION     reduce using rule 5 (external_declaration -> declaration .)
    AMPERSAND       reduce using rule 5 (external_declaration -> declaration .)
    INUMBER         reduce using rule 5 (external_declaration -> declaration .)
    FNUMBER         reduce using rule 5 (external_declaration -> declaration .)
    CHARACTER       reduce using rule 5 (external_declaration -> declaration .)
    LPAREN          reduce using rule 5 (external_declaration -> declaration .)
    STRING          reduce using rule 5 (external_declaration -> declaration .)
    $end            reduce using rule 5 (external_declaration -> declaration .)


state 14

    (9) declaration -> EXTERN . type_specifier declarator SEMICOLON
    (14) type_specifier -> . INT
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . empty
    (17) type_specifier -> . VOID
    (18) type_specifier -> . FLOAT
    (19) type_specifier -> . DOUBLE
    (20) type_specifier -> . LONG
    (96) empty -> .

    INT             shift and go to state 3
    CHAR            shift and go to state 8
    VOID            shift and go to state 5
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 4
    LONG            shift and go to state 6
    ASTERISK        reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    DOUBLE_PLUS     reduce using rule 96 (empty -> .)
    DOUBLE_MINUS    reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    EXCLAMATION     reduce using rule 96 (empty -> .)
    AMPERSAND       reduce using rule 96 (empty -> .)
    INUMBER         reduce using rule 96 (empty -> .)
    FNUMBER         reduce using rule 96 (empty -> .)
    CHARACTER       reduce using rule 96 (empty -> .)
    LPAREN          reduce using rule 96 (empty -> .)
    STRING          reduce using rule 96 (empty -> .)

    type_specifier                 shift and go to state 38
    empty                          shift and go to state 12

state 15

    (1) start -> translation_unit .
    (3) translation_unit -> translation_unit . external_declaration
    (4) external_declaration -> . function_definition
    (5) external_declaration -> . declaration
    (6) function_definition -> . type_specifier declarator compound_statement
    (7) function_definition -> . STATIC type_specifier declarator compound_statement
    (8) declaration -> . type_specifier declarator SEMICOLON
    (9) declaration -> . EXTERN type_specifier declarator SEMICOLON
    (14) type_specifier -> . INT
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . empty
    (17) type_specifier -> . VOID
    (18) type_specifier -> . FLOAT
    (19) type_specifier -> . DOUBLE
    (20) type_specifier -> . LONG
    (96) empty -> .

    $end            reduce using rule 1 (start -> translation_unit .)
    STATIC          shift and go to state 11
    EXTERN          shift and go to state 14
    INT             shift and go to state 3
    CHAR            shift and go to state 8
    VOID            shift and go to state 5
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 4
    LONG            shift and go to state 6
    ASTERISK        reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    DOUBLE_PLUS     reduce using rule 96 (empty -> .)
    DOUBLE_MINUS    reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    EXCLAMATION     reduce using rule 96 (empty -> .)
    AMPERSAND       reduce using rule 96 (empty -> .)
    INUMBER         reduce using rule 96 (empty -> .)
    FNUMBER         reduce using rule 96 (empty -> .)
    CHARACTER       reduce using rule 96 (empty -> .)
    LPAREN          reduce using rule 96 (empty -> .)
    STRING          reduce using rule 96 (empty -> .)

    external_declaration           shift and go to state 39
    function_definition            shift and go to state 2
    declaration                    shift and go to state 13
    type_specifier                 shift and go to state 10
    empty                          shift and go to state 12

state 16

    (73) unary_expression -> EXCLAMATION . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 42
    binary_expression              shift and go to state 32

state 17

    (46) expression -> unary_expression .

    ASSIGN          reduce using rule 46 (expression -> unary_expression .)
    DOUBLE_PIPE     reduce using rule 46 (expression -> unary_expression .)
    DOUBLE_AMPERSAND reduce using rule 46 (expression -> unary_expression .)
    EQ              reduce using rule 46 (expression -> unary_expression .)
    NOT_EQ          reduce using rule 46 (expression -> unary_expression .)
    LESS            reduce using rule 46 (expression -> unary_expression .)
    GREATER         reduce using rule 46 (expression -> unary_expression .)
    LESS_EQ         reduce using rule 46 (expression -> unary_expression .)
    GREATER_EQ      reduce using rule 46 (expression -> unary_expression .)
    PLUS            reduce using rule 46 (expression -> unary_expression .)
    MINUS           reduce using rule 46 (expression -> unary_expression .)
    ASTERISK        reduce using rule 46 (expression -> unary_expression .)
    DIV             reduce using rule 46 (expression -> unary_expression .)
    EQ_PLUS         reduce using rule 46 (expression -> unary_expression .)
    EQ_MINUS        reduce using rule 46 (expression -> unary_expression .)
    EQ_TIMES        reduce using rule 46 (expression -> unary_expression .)
    EQ_DIV          reduce using rule 46 (expression -> unary_expression .)
    RPAREN          reduce using rule 46 (expression -> unary_expression .)
    COMMA           reduce using rule 46 (expression -> unary_expression .)
    SEMICOLON       reduce using rule 46 (expression -> unary_expression .)
    LBRACE          reduce using rule 46 (expression -> unary_expression .)


state 18

    (82) primary_expression -> CHARACTER .

    DOUBLE_PLUS     reduce using rule 82 (primary_expression -> CHARACTER .)
    DOUBLE_MINUS    reduce using rule 82 (primary_expression -> CHARACTER .)
    LPAREN          reduce using rule 82 (primary_expression -> CHARACTER .)
    ASSIGN          reduce using rule 82 (primary_expression -> CHARACTER .)
    DOUBLE_PIPE     reduce using rule 82 (primary_expression -> CHARACTER .)
    DOUBLE_AMPERSAND reduce using rule 82 (primary_expression -> CHARACTER .)
    EQ              reduce using rule 82 (primary_expression -> CHARACTER .)
    NOT_EQ          reduce using rule 82 (primary_expression -> CHARACTER .)
    LESS            reduce using rule 82 (primary_expression -> CHARACTER .)
    GREATER         reduce using rule 82 (primary_expression -> CHARACTER .)
    LESS_EQ         reduce using rule 82 (primary_expression -> CHARACTER .)
    GREATER_EQ      reduce using rule 82 (primary_expression -> CHARACTER .)
    PLUS            reduce using rule 82 (primary_expression -> CHARACTER .)
    MINUS           reduce using rule 82 (primary_expression -> CHARACTER .)
    ASTERISK        reduce using rule 82 (primary_expression -> CHARACTER .)
    DIV             reduce using rule 82 (primary_expression -> CHARACTER .)
    EQ_PLUS         reduce using rule 82 (primary_expression -> CHARACTER .)
    EQ_MINUS        reduce using rule 82 (primary_expression -> CHARACTER .)
    EQ_TIMES        reduce using rule 82 (primary_expression -> CHARACTER .)
    EQ_DIV          reduce using rule 82 (primary_expression -> CHARACTER .)
    RPAREN          reduce using rule 82 (primary_expression -> CHARACTER .)
    COMMA           reduce using rule 82 (primary_expression -> CHARACTER .)
    SEMICOLON       reduce using rule 82 (primary_expression -> CHARACTER .)
    LBRACE          reduce using rule 82 (primary_expression -> CHARACTER .)


state 19

    (85) string_literal -> STRING .

    ASSIGN          reduce using rule 85 (string_literal -> STRING .)
    DOUBLE_PIPE     reduce using rule 85 (string_literal -> STRING .)
    DOUBLE_AMPERSAND reduce using rule 85 (string_literal -> STRING .)
    EQ              reduce using rule 85 (string_literal -> STRING .)
    NOT_EQ          reduce using rule 85 (string_literal -> STRING .)
    LESS            reduce using rule 85 (string_literal -> STRING .)
    GREATER         reduce using rule 85 (string_literal -> STRING .)
    LESS_EQ         reduce using rule 85 (string_literal -> STRING .)
    GREATER_EQ      reduce using rule 85 (string_literal -> STRING .)
    PLUS            reduce using rule 85 (string_literal -> STRING .)
    MINUS           reduce using rule 85 (string_literal -> STRING .)
    ASTERISK        reduce using rule 85 (string_literal -> STRING .)
    DIV             reduce using rule 85 (string_literal -> STRING .)
    EQ_PLUS         reduce using rule 85 (string_literal -> STRING .)
    EQ_MINUS        reduce using rule 85 (string_literal -> STRING .)
    EQ_TIMES        reduce using rule 85 (string_literal -> STRING .)
    EQ_DIV          reduce using rule 85 (string_literal -> STRING .)
    RPAREN          reduce using rule 85 (string_literal -> STRING .)
    COMMA           reduce using rule 85 (string_literal -> STRING .)
    SEMICOLON       reduce using rule 85 (string_literal -> STRING .)
    LBRACE          reduce using rule 85 (string_literal -> STRING .)
    DOUBLE_PLUS     reduce using rule 85 (string_literal -> STRING .)
    DOUBLE_MINUS    reduce using rule 85 (string_literal -> STRING .)
    LPAREN          reduce using rule 85 (string_literal -> STRING .)


state 20

    (71) unary_expression -> MINUS . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 43
    binary_expression              shift and go to state 32

state 21

    (83) primary_expression -> string_literal .

    DOUBLE_PLUS     reduce using rule 83 (primary_expression -> string_literal .)
    DOUBLE_MINUS    reduce using rule 83 (primary_expression -> string_literal .)
    LPAREN          reduce using rule 83 (primary_expression -> string_literal .)
    ASSIGN          reduce using rule 83 (primary_expression -> string_literal .)
    DOUBLE_PIPE     reduce using rule 83 (primary_expression -> string_literal .)
    DOUBLE_AMPERSAND reduce using rule 83 (primary_expression -> string_literal .)
    EQ              reduce using rule 83 (primary_expression -> string_literal .)
    NOT_EQ          reduce using rule 83 (primary_expression -> string_literal .)
    LESS            reduce using rule 83 (primary_expression -> string_literal .)
    GREATER         reduce using rule 83 (primary_expression -> string_literal .)
    LESS_EQ         reduce using rule 83 (primary_expression -> string_literal .)
    GREATER_EQ      reduce using rule 83 (primary_expression -> string_literal .)
    PLUS            reduce using rule 83 (primary_expression -> string_literal .)
    MINUS           reduce using rule 83 (primary_expression -> string_literal .)
    ASTERISK        reduce using rule 83 (primary_expression -> string_literal .)
    DIV             reduce using rule 83 (primary_expression -> string_literal .)
    EQ_PLUS         reduce using rule 83 (primary_expression -> string_literal .)
    EQ_MINUS        reduce using rule 83 (primary_expression -> string_literal .)
    EQ_TIMES        reduce using rule 83 (primary_expression -> string_literal .)
    EQ_DIV          reduce using rule 83 (primary_expression -> string_literal .)
    RPAREN          reduce using rule 83 (primary_expression -> string_literal .)
    COMMA           reduce using rule 83 (primary_expression -> string_literal .)
    SEMICOLON       reduce using rule 83 (primary_expression -> string_literal .)
    LBRACE          reduce using rule 83 (primary_expression -> string_literal .)


state 22

    (69) unary_expression -> DOUBLE_MINUS . primary_expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (85) string_literal -> . STRING

    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    primary_expression             shift and go to state 44
    string_literal                 shift and go to state 21

state 23

    (48) expression -> postfix_expression .

    ASSIGN          reduce using rule 48 (expression -> postfix_expression .)
    DOUBLE_PIPE     reduce using rule 48 (expression -> postfix_expression .)
    DOUBLE_AMPERSAND reduce using rule 48 (expression -> postfix_expression .)
    EQ              reduce using rule 48 (expression -> postfix_expression .)
    NOT_EQ          reduce using rule 48 (expression -> postfix_expression .)
    LESS            reduce using rule 48 (expression -> postfix_expression .)
    GREATER         reduce using rule 48 (expression -> postfix_expression .)
    LESS_EQ         reduce using rule 48 (expression -> postfix_expression .)
    GREATER_EQ      reduce using rule 48 (expression -> postfix_expression .)
    PLUS            reduce using rule 48 (expression -> postfix_expression .)
    MINUS           reduce using rule 48 (expression -> postfix_expression .)
    ASTERISK        reduce using rule 48 (expression -> postfix_expression .)
    DIV             reduce using rule 48 (expression -> postfix_expression .)
    EQ_PLUS         reduce using rule 48 (expression -> postfix_expression .)
    EQ_MINUS        reduce using rule 48 (expression -> postfix_expression .)
    EQ_TIMES        reduce using rule 48 (expression -> postfix_expression .)
    EQ_DIV          reduce using rule 48 (expression -> postfix_expression .)
    RPAREN          reduce using rule 48 (expression -> postfix_expression .)
    COMMA           reduce using rule 48 (expression -> postfix_expression .)
    SEMICOLON       reduce using rule 48 (expression -> postfix_expression .)
    LBRACE          reduce using rule 48 (expression -> postfix_expression .)


state 24

    (66) unary_expression -> PLUS . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 45
    binary_expression              shift and go to state 32

state 25

    (21) declarator -> direct_declarator .
    (23) declarator -> direct_declarator . COMMA declarator
    (27) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (28) direct_declarator -> direct_declarator . LPAREN RPAREN

    SEMICOLON       reduce using rule 21 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 21 (declarator -> direct_declarator .)
    COMMA           shift and go to state 46
    LPAREN          shift and go to state 47


state 26

    (25) declarator -> ASTERISK . declarator
    (72) unary_expression -> ASTERISK . expression
    (21) declarator -> . direct_declarator
    (22) declarator -> . expression ASSIGN expression
    (23) declarator -> . direct_declarator COMMA declarator
    (24) declarator -> . expression ASSIGN expression COMMA declarator
    (25) declarator -> . ASTERISK declarator
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (26) direct_declarator -> . ID
    (27) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (28) direct_declarator -> . direct_declarator LPAREN RPAREN
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    ASTERISK        shift and go to state 26
    ID              shift and go to state 30
    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    direct_declarator              shift and go to state 25
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    declarator                     shift and go to state 48
    expression                     shift and go to state 49
    string_literal                 shift and go to state 21

state 27

    (74) unary_expression -> AMPERSAND . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 50
    binary_expression              shift and go to state 32

state 28

    (47) expression -> primary_expression .
    (68) unary_expression -> primary_expression . DOUBLE_PLUS
    (70) unary_expression -> primary_expression . DOUBLE_MINUS
    (75) postfix_expression -> primary_expression . LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> primary_expression . LPAREN RPAREN

    ASSIGN          reduce using rule 47 (expression -> primary_expression .)
    DOUBLE_PIPE     reduce using rule 47 (expression -> primary_expression .)
    DOUBLE_AMPERSAND reduce using rule 47 (expression -> primary_expression .)
    EQ              reduce using rule 47 (expression -> primary_expression .)
    NOT_EQ          reduce using rule 47 (expression -> primary_expression .)
    LESS            reduce using rule 47 (expression -> primary_expression .)
    GREATER         reduce using rule 47 (expression -> primary_expression .)
    LESS_EQ         reduce using rule 47 (expression -> primary_expression .)
    GREATER_EQ      reduce using rule 47 (expression -> primary_expression .)
    PLUS            reduce using rule 47 (expression -> primary_expression .)
    MINUS           reduce using rule 47 (expression -> primary_expression .)
    ASTERISK        reduce using rule 47 (expression -> primary_expression .)
    DIV             reduce using rule 47 (expression -> primary_expression .)
    EQ_PLUS         reduce using rule 47 (expression -> primary_expression .)
    EQ_MINUS        reduce using rule 47 (expression -> primary_expression .)
    EQ_TIMES        reduce using rule 47 (expression -> primary_expression .)
    EQ_DIV          reduce using rule 47 (expression -> primary_expression .)
    RPAREN          reduce using rule 47 (expression -> primary_expression .)
    COMMA           reduce using rule 47 (expression -> primary_expression .)
    SEMICOLON       reduce using rule 47 (expression -> primary_expression .)
    LBRACE          reduce using rule 47 (expression -> primary_expression .)
    DOUBLE_PLUS     shift and go to state 53
    DOUBLE_MINUS    shift and go to state 51
    LPAREN          shift and go to state 52


state 29

    (84) primary_expression -> LPAREN . expression RPAREN
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 54
    binary_expression              shift and go to state 32

state 30

    (26) direct_declarator -> ID .
    (79) primary_expression -> ID .

  ! reduce/reduce conflict for LPAREN resolved using rule 26 (direct_declarator -> ID .)
    COMMA           reduce using rule 26 (direct_declarator -> ID .)
    LPAREN          reduce using rule 26 (direct_declarator -> ID .)
    SEMICOLON       reduce using rule 26 (direct_declarator -> ID .)
    LBRACE          reduce using rule 26 (direct_declarator -> ID .)
    DOUBLE_PLUS     reduce using rule 79 (primary_expression -> ID .)
    DOUBLE_MINUS    reduce using rule 79 (primary_expression -> ID .)
    ASSIGN          reduce using rule 79 (primary_expression -> ID .)
    DOUBLE_PIPE     reduce using rule 79 (primary_expression -> ID .)
    DOUBLE_AMPERSAND reduce using rule 79 (primary_expression -> ID .)
    EQ              reduce using rule 79 (primary_expression -> ID .)
    NOT_EQ          reduce using rule 79 (primary_expression -> ID .)
    LESS            reduce using rule 79 (primary_expression -> ID .)
    GREATER         reduce using rule 79 (primary_expression -> ID .)
    LESS_EQ         reduce using rule 79 (primary_expression -> ID .)
    GREATER_EQ      reduce using rule 79 (primary_expression -> ID .)
    PLUS            reduce using rule 79 (primary_expression -> ID .)
    MINUS           reduce using rule 79 (primary_expression -> ID .)
    ASTERISK        reduce using rule 79 (primary_expression -> ID .)
    DIV             reduce using rule 79 (primary_expression -> ID .)
    EQ_PLUS         reduce using rule 79 (primary_expression -> ID .)
    EQ_MINUS        reduce using rule 79 (primary_expression -> ID .)
    EQ_TIMES        reduce using rule 79 (primary_expression -> ID .)
    EQ_DIV          reduce using rule 79 (primary_expression -> ID .)

  ! LPAREN          [ reduce using rule 79 (primary_expression -> ID .) ]


state 31

    (81) primary_expression -> FNUMBER .

    DOUBLE_PLUS     reduce using rule 81 (primary_expression -> FNUMBER .)
    DOUBLE_MINUS    reduce using rule 81 (primary_expression -> FNUMBER .)
    LPAREN          reduce using rule 81 (primary_expression -> FNUMBER .)
    ASSIGN          reduce using rule 81 (primary_expression -> FNUMBER .)
    DOUBLE_PIPE     reduce using rule 81 (primary_expression -> FNUMBER .)
    DOUBLE_AMPERSAND reduce using rule 81 (primary_expression -> FNUMBER .)
    EQ              reduce using rule 81 (primary_expression -> FNUMBER .)
    NOT_EQ          reduce using rule 81 (primary_expression -> FNUMBER .)
    LESS            reduce using rule 81 (primary_expression -> FNUMBER .)
    GREATER         reduce using rule 81 (primary_expression -> FNUMBER .)
    LESS_EQ         reduce using rule 81 (primary_expression -> FNUMBER .)
    GREATER_EQ      reduce using rule 81 (primary_expression -> FNUMBER .)
    PLUS            reduce using rule 81 (primary_expression -> FNUMBER .)
    MINUS           reduce using rule 81 (primary_expression -> FNUMBER .)
    ASTERISK        reduce using rule 81 (primary_expression -> FNUMBER .)
    DIV             reduce using rule 81 (primary_expression -> FNUMBER .)
    EQ_PLUS         reduce using rule 81 (primary_expression -> FNUMBER .)
    EQ_MINUS        reduce using rule 81 (primary_expression -> FNUMBER .)
    EQ_TIMES        reduce using rule 81 (primary_expression -> FNUMBER .)
    EQ_DIV          reduce using rule 81 (primary_expression -> FNUMBER .)
    RPAREN          reduce using rule 81 (primary_expression -> FNUMBER .)
    COMMA           reduce using rule 81 (primary_expression -> FNUMBER .)
    SEMICOLON       reduce using rule 81 (primary_expression -> FNUMBER .)
    LBRACE          reduce using rule 81 (primary_expression -> FNUMBER .)


state 32

    (45) expression -> binary_expression .

    ASSIGN          reduce using rule 45 (expression -> binary_expression .)
    DOUBLE_PIPE     reduce using rule 45 (expression -> binary_expression .)
    DOUBLE_AMPERSAND reduce using rule 45 (expression -> binary_expression .)
    EQ              reduce using rule 45 (expression -> binary_expression .)
    NOT_EQ          reduce using rule 45 (expression -> binary_expression .)
    LESS            reduce using rule 45 (expression -> binary_expression .)
    GREATER         reduce using rule 45 (expression -> binary_expression .)
    LESS_EQ         reduce using rule 45 (expression -> binary_expression .)
    GREATER_EQ      reduce using rule 45 (expression -> binary_expression .)
    PLUS            reduce using rule 45 (expression -> binary_expression .)
    MINUS           reduce using rule 45 (expression -> binary_expression .)
    ASTERISK        reduce using rule 45 (expression -> binary_expression .)
    DIV             reduce using rule 45 (expression -> binary_expression .)
    EQ_PLUS         reduce using rule 45 (expression -> binary_expression .)
    EQ_MINUS        reduce using rule 45 (expression -> binary_expression .)
    EQ_TIMES        reduce using rule 45 (expression -> binary_expression .)
    EQ_DIV          reduce using rule 45 (expression -> binary_expression .)
    RPAREN          reduce using rule 45 (expression -> binary_expression .)
    COMMA           reduce using rule 45 (expression -> binary_expression .)
    SEMICOLON       reduce using rule 45 (expression -> binary_expression .)
    LBRACE          reduce using rule 45 (expression -> binary_expression .)


state 33

    (80) primary_expression -> INUMBER .

    DOUBLE_PLUS     reduce using rule 80 (primary_expression -> INUMBER .)
    DOUBLE_MINUS    reduce using rule 80 (primary_expression -> INUMBER .)
    LPAREN          reduce using rule 80 (primary_expression -> INUMBER .)
    ASSIGN          reduce using rule 80 (primary_expression -> INUMBER .)
    DOUBLE_PIPE     reduce using rule 80 (primary_expression -> INUMBER .)
    DOUBLE_AMPERSAND reduce using rule 80 (primary_expression -> INUMBER .)
    EQ              reduce using rule 80 (primary_expression -> INUMBER .)
    NOT_EQ          reduce using rule 80 (primary_expression -> INUMBER .)
    LESS            reduce using rule 80 (primary_expression -> INUMBER .)
    GREATER         reduce using rule 80 (primary_expression -> INUMBER .)
    LESS_EQ         reduce using rule 80 (primary_expression -> INUMBER .)
    GREATER_EQ      reduce using rule 80 (primary_expression -> INUMBER .)
    PLUS            reduce using rule 80 (primary_expression -> INUMBER .)
    MINUS           reduce using rule 80 (primary_expression -> INUMBER .)
    ASTERISK        reduce using rule 80 (primary_expression -> INUMBER .)
    DIV             reduce using rule 80 (primary_expression -> INUMBER .)
    EQ_PLUS         reduce using rule 80 (primary_expression -> INUMBER .)
    EQ_MINUS        reduce using rule 80 (primary_expression -> INUMBER .)
    EQ_TIMES        reduce using rule 80 (primary_expression -> INUMBER .)
    EQ_DIV          reduce using rule 80 (primary_expression -> INUMBER .)
    RPAREN          reduce using rule 80 (primary_expression -> INUMBER .)
    COMMA           reduce using rule 80 (primary_expression -> INUMBER .)
    SEMICOLON       reduce using rule 80 (primary_expression -> INUMBER .)
    LBRACE          reduce using rule 80 (primary_expression -> INUMBER .)


state 34

    (6) function_definition -> type_specifier declarator . compound_statement
    (8) declaration -> type_specifier declarator . SEMICOLON
    (33) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (34) compound_statement -> . LBRACE declaration_list_opt RBRACE

    SEMICOLON       shift and go to state 55
    LBRACE          shift and go to state 57

    compound_statement             shift and go to state 56

state 35

    (22) declarator -> expression . ASSIGN expression
    (24) declarator -> expression . ASSIGN expression COMMA declarator
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    ASSIGN          shift and go to state 72
    DOUBLE_PIPE     shift and go to state 66
    DOUBLE_AMPERSAND shift and go to state 61
    EQ              shift and go to state 63
    NOT_EQ          shift and go to state 70
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73
    EQ_PLUS         shift and go to state 60
    EQ_MINUS        shift and go to state 71
    EQ_TIMES        shift and go to state 74
    EQ_DIV          shift and go to state 62


state 36

    (67) unary_expression -> DOUBLE_PLUS . primary_expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (85) string_literal -> . STRING

    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    primary_expression             shift and go to state 75
    string_literal                 shift and go to state 21

state 37

    (7) function_definition -> STATIC type_specifier . declarator compound_statement
    (21) declarator -> . direct_declarator
    (22) declarator -> . expression ASSIGN expression
    (23) declarator -> . direct_declarator COMMA declarator
    (24) declarator -> . expression ASSIGN expression COMMA declarator
    (25) declarator -> . ASTERISK declarator
    (26) direct_declarator -> . ID
    (27) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (28) direct_declarator -> . direct_declarator LPAREN RPAREN
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    ASTERISK        shift and go to state 26
    ID              shift and go to state 30
    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    direct_declarator              shift and go to state 25
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    declarator                     shift and go to state 76
    expression                     shift and go to state 35
    string_literal                 shift and go to state 21

state 38

    (9) declaration -> EXTERN type_specifier . declarator SEMICOLON
    (21) declarator -> . direct_declarator
    (22) declarator -> . expression ASSIGN expression
    (23) declarator -> . direct_declarator COMMA declarator
    (24) declarator -> . expression ASSIGN expression COMMA declarator
    (25) declarator -> . ASTERISK declarator
    (26) direct_declarator -> . ID
    (27) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (28) direct_declarator -> . direct_declarator LPAREN RPAREN
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    ASTERISK        shift and go to state 26
    ID              shift and go to state 30
    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    direct_declarator              shift and go to state 25
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    declarator                     shift and go to state 77
    expression                     shift and go to state 35
    string_literal                 shift and go to state 21

state 39

    (3) translation_unit -> translation_unit external_declaration .

    STATIC          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    ASTERISK        reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    ID              reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    PLUS            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    DOUBLE_PLUS     reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    DOUBLE_MINUS    reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    MINUS           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    EXCLAMATION     reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    AMPERSAND       reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    INUMBER         reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    FNUMBER         reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    CHARACTER       reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    LPAREN          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    STRING          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)


state 40

    (72) unary_expression -> ASTERISK . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 78
    binary_expression              shift and go to state 32

state 41

    (79) primary_expression -> ID .

    DOUBLE_PLUS     reduce using rule 79 (primary_expression -> ID .)
    DOUBLE_MINUS    reduce using rule 79 (primary_expression -> ID .)
    LPAREN          reduce using rule 79 (primary_expression -> ID .)
    ASSIGN          reduce using rule 79 (primary_expression -> ID .)
    DOUBLE_PIPE     reduce using rule 79 (primary_expression -> ID .)
    DOUBLE_AMPERSAND reduce using rule 79 (primary_expression -> ID .)
    EQ              reduce using rule 79 (primary_expression -> ID .)
    NOT_EQ          reduce using rule 79 (primary_expression -> ID .)
    LESS            reduce using rule 79 (primary_expression -> ID .)
    GREATER         reduce using rule 79 (primary_expression -> ID .)
    LESS_EQ         reduce using rule 79 (primary_expression -> ID .)
    GREATER_EQ      reduce using rule 79 (primary_expression -> ID .)
    PLUS            reduce using rule 79 (primary_expression -> ID .)
    MINUS           reduce using rule 79 (primary_expression -> ID .)
    ASTERISK        reduce using rule 79 (primary_expression -> ID .)
    DIV             reduce using rule 79 (primary_expression -> ID .)
    EQ_PLUS         reduce using rule 79 (primary_expression -> ID .)
    EQ_MINUS        reduce using rule 79 (primary_expression -> ID .)
    EQ_TIMES        reduce using rule 79 (primary_expression -> ID .)
    EQ_DIV          reduce using rule 79 (primary_expression -> ID .)
    RPAREN          reduce using rule 79 (primary_expression -> ID .)
    COMMA           reduce using rule 79 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 79 (primary_expression -> ID .)
    LBRACE          reduce using rule 79 (primary_expression -> ID .)


state 42

    (73) unary_expression -> EXCLAMATION expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    ASSIGN          reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    DOUBLE_PIPE     reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    DOUBLE_AMPERSAND reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    EQ              reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    NOT_EQ          reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    LESS            reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    GREATER         reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    LESS_EQ         reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    GREATER_EQ      reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    PLUS            reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    MINUS           reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    ASTERISK        reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    DIV             reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    EQ_PLUS         reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    EQ_MINUS        reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    EQ_TIMES        reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    EQ_DIV          reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    RPAREN          reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    COMMA           reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    SEMICOLON       reduce using rule 73 (unary_expression -> EXCLAMATION expression .)
    LBRACE          reduce using rule 73 (unary_expression -> EXCLAMATION expression .)

  ! ASSIGN          [ shift and go to state 79 ]
  ! DOUBLE_PIPE     [ shift and go to state 66 ]
  ! DOUBLE_AMPERSAND [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 63 ]
  ! NOT_EQ          [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 64 ]
  ! GREATER         [ shift and go to state 59 ]
  ! LESS_EQ         [ shift and go to state 58 ]
  ! GREATER_EQ      [ shift and go to state 68 ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 67 ]
  ! ASTERISK        [ shift and go to state 65 ]
  ! DIV             [ shift and go to state 73 ]
  ! EQ_PLUS         [ shift and go to state 60 ]
  ! EQ_MINUS        [ shift and go to state 71 ]
  ! EQ_TIMES        [ shift and go to state 74 ]
  ! EQ_DIV          [ shift and go to state 62 ]


state 43

    (71) unary_expression -> MINUS expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    ASSIGN          reduce using rule 71 (unary_expression -> MINUS expression .)
    DOUBLE_PIPE     reduce using rule 71 (unary_expression -> MINUS expression .)
    DOUBLE_AMPERSAND reduce using rule 71 (unary_expression -> MINUS expression .)
    EQ              reduce using rule 71 (unary_expression -> MINUS expression .)
    NOT_EQ          reduce using rule 71 (unary_expression -> MINUS expression .)
    LESS            reduce using rule 71 (unary_expression -> MINUS expression .)
    GREATER         reduce using rule 71 (unary_expression -> MINUS expression .)
    LESS_EQ         reduce using rule 71 (unary_expression -> MINUS expression .)
    GREATER_EQ      reduce using rule 71 (unary_expression -> MINUS expression .)
    PLUS            reduce using rule 71 (unary_expression -> MINUS expression .)
    MINUS           reduce using rule 71 (unary_expression -> MINUS expression .)
    ASTERISK        reduce using rule 71 (unary_expression -> MINUS expression .)
    DIV             reduce using rule 71 (unary_expression -> MINUS expression .)
    EQ_PLUS         reduce using rule 71 (unary_expression -> MINUS expression .)
    EQ_MINUS        reduce using rule 71 (unary_expression -> MINUS expression .)
    EQ_TIMES        reduce using rule 71 (unary_expression -> MINUS expression .)
    EQ_DIV          reduce using rule 71 (unary_expression -> MINUS expression .)
    RPAREN          reduce using rule 71 (unary_expression -> MINUS expression .)
    COMMA           reduce using rule 71 (unary_expression -> MINUS expression .)
    SEMICOLON       reduce using rule 71 (unary_expression -> MINUS expression .)
    LBRACE          reduce using rule 71 (unary_expression -> MINUS expression .)

  ! ASSIGN          [ shift and go to state 79 ]
  ! DOUBLE_PIPE     [ shift and go to state 66 ]
  ! DOUBLE_AMPERSAND [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 63 ]
  ! NOT_EQ          [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 64 ]
  ! GREATER         [ shift and go to state 59 ]
  ! LESS_EQ         [ shift and go to state 58 ]
  ! GREATER_EQ      [ shift and go to state 68 ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 67 ]
  ! ASTERISK        [ shift and go to state 65 ]
  ! DIV             [ shift and go to state 73 ]
  ! EQ_PLUS         [ shift and go to state 60 ]
  ! EQ_MINUS        [ shift and go to state 71 ]
  ! EQ_TIMES        [ shift and go to state 74 ]
  ! EQ_DIV          [ shift and go to state 62 ]


state 44

    (69) unary_expression -> DOUBLE_MINUS primary_expression .

    ASSIGN          reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    DOUBLE_PIPE     reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    DOUBLE_AMPERSAND reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    EQ              reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    NOT_EQ          reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    LESS            reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    GREATER         reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    LESS_EQ         reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    GREATER_EQ      reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    PLUS            reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    MINUS           reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    ASTERISK        reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    DIV             reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    EQ_PLUS         reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    EQ_MINUS        reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    EQ_TIMES        reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    EQ_DIV          reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    RPAREN          reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    COMMA           reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    SEMICOLON       reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)
    LBRACE          reduce using rule 69 (unary_expression -> DOUBLE_MINUS primary_expression .)


state 45

    (66) unary_expression -> PLUS expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    ASSIGN          reduce using rule 66 (unary_expression -> PLUS expression .)
    DOUBLE_PIPE     reduce using rule 66 (unary_expression -> PLUS expression .)
    DOUBLE_AMPERSAND reduce using rule 66 (unary_expression -> PLUS expression .)
    EQ              reduce using rule 66 (unary_expression -> PLUS expression .)
    NOT_EQ          reduce using rule 66 (unary_expression -> PLUS expression .)
    LESS            reduce using rule 66 (unary_expression -> PLUS expression .)
    GREATER         reduce using rule 66 (unary_expression -> PLUS expression .)
    LESS_EQ         reduce using rule 66 (unary_expression -> PLUS expression .)
    GREATER_EQ      reduce using rule 66 (unary_expression -> PLUS expression .)
    PLUS            reduce using rule 66 (unary_expression -> PLUS expression .)
    MINUS           reduce using rule 66 (unary_expression -> PLUS expression .)
    EQ_PLUS         reduce using rule 66 (unary_expression -> PLUS expression .)
    EQ_MINUS        reduce using rule 66 (unary_expression -> PLUS expression .)
    EQ_TIMES        reduce using rule 66 (unary_expression -> PLUS expression .)
    EQ_DIV          reduce using rule 66 (unary_expression -> PLUS expression .)
    RPAREN          reduce using rule 66 (unary_expression -> PLUS expression .)
    COMMA           reduce using rule 66 (unary_expression -> PLUS expression .)
    SEMICOLON       reduce using rule 66 (unary_expression -> PLUS expression .)
    LBRACE          reduce using rule 66 (unary_expression -> PLUS expression .)
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73

  ! ASTERISK        [ reduce using rule 66 (unary_expression -> PLUS expression .) ]
  ! DIV             [ reduce using rule 66 (unary_expression -> PLUS expression .) ]
  ! ASSIGN          [ shift and go to state 79 ]
  ! DOUBLE_PIPE     [ shift and go to state 66 ]
  ! DOUBLE_AMPERSAND [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 63 ]
  ! NOT_EQ          [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 64 ]
  ! GREATER         [ shift and go to state 59 ]
  ! LESS_EQ         [ shift and go to state 58 ]
  ! GREATER_EQ      [ shift and go to state 68 ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 67 ]
  ! EQ_PLUS         [ shift and go to state 60 ]
  ! EQ_MINUS        [ shift and go to state 71 ]
  ! EQ_TIMES        [ shift and go to state 74 ]
  ! EQ_DIV          [ shift and go to state 62 ]


state 46

    (23) declarator -> direct_declarator COMMA . declarator
    (21) declarator -> . direct_declarator
    (22) declarator -> . expression ASSIGN expression
    (23) declarator -> . direct_declarator COMMA declarator
    (24) declarator -> . expression ASSIGN expression COMMA declarator
    (25) declarator -> . ASTERISK declarator
    (26) direct_declarator -> . ID
    (27) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (28) direct_declarator -> . direct_declarator LPAREN RPAREN
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    ASTERISK        shift and go to state 26
    ID              shift and go to state 30
    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    direct_declarator              shift and go to state 25
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    declarator                     shift and go to state 80
    expression                     shift and go to state 35
    string_literal                 shift and go to state 21

state 47

    (27) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (28) direct_declarator -> direct_declarator LPAREN . RPAREN
    (29) parameter_type_list -> . parameter_list
    (30) parameter_list -> . type_specifier expression
    (31) parameter_list -> . type_specifier expression COMMA parameter_list
    (14) type_specifier -> . INT
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . empty
    (17) type_specifier -> . VOID
    (18) type_specifier -> . FLOAT
    (19) type_specifier -> . DOUBLE
    (20) type_specifier -> . LONG
    (96) empty -> .

    RPAREN          shift and go to state 82
    INT             shift and go to state 3
    CHAR            shift and go to state 8
    VOID            shift and go to state 5
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 4
    LONG            shift and go to state 6
    PLUS            reduce using rule 96 (empty -> .)
    DOUBLE_PLUS     reduce using rule 96 (empty -> .)
    DOUBLE_MINUS    reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    ASTERISK        reduce using rule 96 (empty -> .)
    EXCLAMATION     reduce using rule 96 (empty -> .)
    AMPERSAND       reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)
    INUMBER         reduce using rule 96 (empty -> .)
    FNUMBER         reduce using rule 96 (empty -> .)
    CHARACTER       reduce using rule 96 (empty -> .)
    LPAREN          reduce using rule 96 (empty -> .)
    STRING          reduce using rule 96 (empty -> .)

    type_specifier                 shift and go to state 81
    parameter_list                 shift and go to state 83
    parameter_type_list            shift and go to state 84
    empty                          shift and go to state 12

state 48

    (25) declarator -> ASTERISK declarator .

    SEMICOLON       reduce using rule 25 (declarator -> ASTERISK declarator .)
    LBRACE          reduce using rule 25 (declarator -> ASTERISK declarator .)


state 49

    (72) unary_expression -> ASTERISK expression .
    (22) declarator -> expression . ASSIGN expression
    (24) declarator -> expression . ASSIGN expression COMMA declarator
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    ASSIGN          reduce using rule 72 (unary_expression -> ASTERISK expression .)
    DOUBLE_PIPE     reduce using rule 72 (unary_expression -> ASTERISK expression .)
    DOUBLE_AMPERSAND reduce using rule 72 (unary_expression -> ASTERISK expression .)
    EQ              reduce using rule 72 (unary_expression -> ASTERISK expression .)
    NOT_EQ          reduce using rule 72 (unary_expression -> ASTERISK expression .)
    LESS            reduce using rule 72 (unary_expression -> ASTERISK expression .)
    GREATER         reduce using rule 72 (unary_expression -> ASTERISK expression .)
    LESS_EQ         reduce using rule 72 (unary_expression -> ASTERISK expression .)
    GREATER_EQ      reduce using rule 72 (unary_expression -> ASTERISK expression .)
    PLUS            reduce using rule 72 (unary_expression -> ASTERISK expression .)
    MINUS           reduce using rule 72 (unary_expression -> ASTERISK expression .)
    ASTERISK        reduce using rule 72 (unary_expression -> ASTERISK expression .)
    DIV             reduce using rule 72 (unary_expression -> ASTERISK expression .)
    EQ_PLUS         reduce using rule 72 (unary_expression -> ASTERISK expression .)
    EQ_MINUS        reduce using rule 72 (unary_expression -> ASTERISK expression .)
    EQ_TIMES        reduce using rule 72 (unary_expression -> ASTERISK expression .)
    EQ_DIV          reduce using rule 72 (unary_expression -> ASTERISK expression .)

  ! ASSIGN          [ shift and go to state 72 ]
  ! DOUBLE_PIPE     [ shift and go to state 66 ]
  ! DOUBLE_AMPERSAND [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 63 ]
  ! NOT_EQ          [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 64 ]
  ! GREATER         [ shift and go to state 59 ]
  ! LESS_EQ         [ shift and go to state 58 ]
  ! GREATER_EQ      [ shift and go to state 68 ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 67 ]
  ! ASTERISK        [ shift and go to state 65 ]
  ! DIV             [ shift and go to state 73 ]
  ! EQ_PLUS         [ shift and go to state 60 ]
  ! EQ_MINUS        [ shift and go to state 71 ]
  ! EQ_TIMES        [ shift and go to state 74 ]
  ! EQ_DIV          [ shift and go to state 62 ]


state 50

    (74) unary_expression -> AMPERSAND expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    ASSIGN          reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    DOUBLE_PIPE     reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    DOUBLE_AMPERSAND reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    EQ              reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    NOT_EQ          reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    LESS            reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    GREATER         reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    LESS_EQ         reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    GREATER_EQ      reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    PLUS            reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    MINUS           reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    ASTERISK        reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    DIV             reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    EQ_PLUS         reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    EQ_MINUS        reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    EQ_TIMES        reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    EQ_DIV          reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    RPAREN          reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    COMMA           reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    SEMICOLON       reduce using rule 74 (unary_expression -> AMPERSAND expression .)
    LBRACE          reduce using rule 74 (unary_expression -> AMPERSAND expression .)

  ! ASSIGN          [ shift and go to state 79 ]
  ! DOUBLE_PIPE     [ shift and go to state 66 ]
  ! DOUBLE_AMPERSAND [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 63 ]
  ! NOT_EQ          [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 64 ]
  ! GREATER         [ shift and go to state 59 ]
  ! LESS_EQ         [ shift and go to state 58 ]
  ! GREATER_EQ      [ shift and go to state 68 ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 67 ]
  ! ASTERISK        [ shift and go to state 65 ]
  ! DIV             [ shift and go to state 73 ]
  ! EQ_PLUS         [ shift and go to state 60 ]
  ! EQ_MINUS        [ shift and go to state 71 ]
  ! EQ_TIMES        [ shift and go to state 74 ]
  ! EQ_DIV          [ shift and go to state 62 ]


state 51

    (70) unary_expression -> primary_expression DOUBLE_MINUS .

    ASSIGN          reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    DOUBLE_PIPE     reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    DOUBLE_AMPERSAND reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    EQ              reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    NOT_EQ          reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    LESS            reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    GREATER         reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    LESS_EQ         reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    GREATER_EQ      reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    PLUS            reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    MINUS           reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    ASTERISK        reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    DIV             reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    EQ_PLUS         reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    EQ_MINUS        reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    EQ_TIMES        reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    EQ_DIV          reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    RPAREN          reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    COMMA           reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    SEMICOLON       reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)
    LBRACE          reduce using rule 70 (unary_expression -> primary_expression DOUBLE_MINUS .)


state 52

    (75) postfix_expression -> primary_expression LPAREN . argument_expression_list RPAREN
    (76) postfix_expression -> primary_expression LPAREN . RPAREN
    (77) argument_expression_list -> . expression
    (78) argument_expression_list -> . expression COMMA argument_expression_list
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    RPAREN          shift and go to state 85
    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    argument_expression_list       shift and go to state 86
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 87
    string_literal                 shift and go to state 21

state 53

    (68) unary_expression -> primary_expression DOUBLE_PLUS .

    ASSIGN          reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    DOUBLE_PIPE     reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    DOUBLE_AMPERSAND reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    EQ              reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    NOT_EQ          reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    LESS            reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    GREATER         reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    LESS_EQ         reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    GREATER_EQ      reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    PLUS            reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    MINUS           reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    ASTERISK        reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    DIV             reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    EQ_PLUS         reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    EQ_MINUS        reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    EQ_TIMES        reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    EQ_DIV          reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    RPAREN          reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    COMMA           reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    SEMICOLON       reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)
    LBRACE          reduce using rule 68 (unary_expression -> primary_expression DOUBLE_PLUS .)


state 54

    (84) primary_expression -> LPAREN expression . RPAREN
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    RPAREN          shift and go to state 88
    ASSIGN          shift and go to state 79
    DOUBLE_PIPE     shift and go to state 66
    DOUBLE_AMPERSAND shift and go to state 61
    EQ              shift and go to state 63
    NOT_EQ          shift and go to state 70
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73
    EQ_PLUS         shift and go to state 60
    EQ_MINUS        shift and go to state 71
    EQ_TIMES        shift and go to state 74
    EQ_DIV          shift and go to state 62


state 55

    (8) declaration -> type_specifier declarator SEMICOLON .

    EXTERN          reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    INT             reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    CHAR            reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    VOID            reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    FLOAT           reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    DOUBLE          reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    LONG            reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    ASTERISK        reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    ID              reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    PLUS            reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    DOUBLE_PLUS     reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    DOUBLE_MINUS    reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    MINUS           reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    EXCLAMATION     reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    AMPERSAND       reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    INUMBER         reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    FNUMBER         reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    CHARACTER       reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    LPAREN          reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    STRING          reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    RBRACE          reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    LBRACE          reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    RETURN          reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    BREAK           reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    CONTINUE        reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    GOTO            reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    WHILE           reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    DO              reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    FOR             reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    IF              reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    STATIC          reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)
    $end            reduce using rule 8 (declaration -> type_specifier declarator SEMICOLON .)


state 56

    (6) function_definition -> type_specifier declarator compound_statement .

    STATIC          reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    EXTERN          reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    INT             reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    CHAR            reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    VOID            reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    FLOAT           reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    DOUBLE          reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    LONG            reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    ASTERISK        reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    ID              reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    PLUS            reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    DOUBLE_PLUS     reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    DOUBLE_MINUS    reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    MINUS           reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    EXCLAMATION     reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    AMPERSAND       reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    INUMBER         reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    FNUMBER         reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    CHARACTER       reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    LPAREN          reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    STRING          reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    $end            reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)


state 57

    (33) compound_statement -> LBRACE . declaration_list_opt statement_list RBRACE
    (34) compound_statement -> LBRACE . declaration_list_opt RBRACE
    (10) declaration_list_opt -> . empty
    (11) declaration_list_opt -> . declaration_list
    (96) empty -> .
    (12) declaration_list -> . declaration
    (13) declaration_list -> . declaration declaration_list
    (8) declaration -> . type_specifier declarator SEMICOLON
    (9) declaration -> . EXTERN type_specifier declarator SEMICOLON
    (14) type_specifier -> . INT
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . empty
    (17) type_specifier -> . VOID
    (18) type_specifier -> . FLOAT
    (19) type_specifier -> . DOUBLE
    (20) type_specifier -> . LONG

    RBRACE          reduce using rule 96 (empty -> .)
    LBRACE          reduce using rule 96 (empty -> .)
    RETURN          reduce using rule 96 (empty -> .)
    BREAK           reduce using rule 96 (empty -> .)
    CONTINUE        reduce using rule 96 (empty -> .)
    GOTO            reduce using rule 96 (empty -> .)
    WHILE           reduce using rule 96 (empty -> .)
    DO              reduce using rule 96 (empty -> .)
    FOR             reduce using rule 96 (empty -> .)
    IF              reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    DOUBLE_PLUS     reduce using rule 96 (empty -> .)
    DOUBLE_MINUS    reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    ASTERISK        reduce using rule 96 (empty -> .)
    EXCLAMATION     reduce using rule 96 (empty -> .)
    AMPERSAND       reduce using rule 96 (empty -> .)
    INUMBER         reduce using rule 96 (empty -> .)
    FNUMBER         reduce using rule 96 (empty -> .)
    CHARACTER       reduce using rule 96 (empty -> .)
    LPAREN          reduce using rule 96 (empty -> .)
    STRING          reduce using rule 96 (empty -> .)
    EXTERN          shift and go to state 14
    INT             shift and go to state 3
    CHAR            shift and go to state 8
    VOID            shift and go to state 5
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 4
    LONG            shift and go to state 6

    declaration_list_opt           shift and go to state 89
    type_specifier                 shift and go to state 91
    declaration_list               shift and go to state 90
    declaration                    shift and go to state 92
    empty                          shift and go to state 93

state 58

    (56) binary_expression -> expression LESS_EQ . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 94
    binary_expression              shift and go to state 32

state 59

    (55) binary_expression -> expression GREATER . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 95
    binary_expression              shift and go to state 32

state 60

    (62) binary_expression -> expression EQ_PLUS . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 96
    binary_expression              shift and go to state 32

state 61

    (51) binary_expression -> expression DOUBLE_AMPERSAND . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 97
    binary_expression              shift and go to state 32

state 62

    (65) binary_expression -> expression EQ_DIV . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 98
    binary_expression              shift and go to state 32

state 63

    (52) binary_expression -> expression EQ . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 99
    binary_expression              shift and go to state 32

state 64

    (54) binary_expression -> expression LESS . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 100
    binary_expression              shift and go to state 32

state 65

    (60) binary_expression -> expression ASTERISK . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 101
    binary_expression              shift and go to state 32

state 66

    (50) binary_expression -> expression DOUBLE_PIPE . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 102
    binary_expression              shift and go to state 32

state 67

    (59) binary_expression -> expression MINUS . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 103
    binary_expression              shift and go to state 32

state 68

    (57) binary_expression -> expression GREATER_EQ . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 104
    binary_expression              shift and go to state 32

state 69

    (58) binary_expression -> expression PLUS . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 105
    binary_expression              shift and go to state 32

state 70

    (53) binary_expression -> expression NOT_EQ . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 106
    binary_expression              shift and go to state 32

state 71

    (63) binary_expression -> expression EQ_MINUS . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 107
    binary_expression              shift and go to state 32

state 72

    (22) declarator -> expression ASSIGN . expression
    (24) declarator -> expression ASSIGN . expression COMMA declarator
    (49) binary_expression -> expression ASSIGN . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 108
    string_literal                 shift and go to state 21

state 73

    (61) binary_expression -> expression DIV . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 109
    binary_expression              shift and go to state 32

state 74

    (64) binary_expression -> expression EQ_TIMES . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 110
    binary_expression              shift and go to state 32

state 75

    (67) unary_expression -> DOUBLE_PLUS primary_expression .

    ASSIGN          reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    DOUBLE_PIPE     reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    DOUBLE_AMPERSAND reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    EQ              reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    NOT_EQ          reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    LESS            reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    GREATER         reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    LESS_EQ         reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    GREATER_EQ      reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    PLUS            reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    MINUS           reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    ASTERISK        reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    DIV             reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    EQ_PLUS         reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    EQ_MINUS        reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    EQ_TIMES        reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    EQ_DIV          reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    RPAREN          reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    COMMA           reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    SEMICOLON       reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)
    LBRACE          reduce using rule 67 (unary_expression -> DOUBLE_PLUS primary_expression .)


state 76

    (7) function_definition -> STATIC type_specifier declarator . compound_statement
    (33) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (34) compound_statement -> . LBRACE declaration_list_opt RBRACE

    LBRACE          shift and go to state 57

    compound_statement             shift and go to state 111

state 77

    (9) declaration -> EXTERN type_specifier declarator . SEMICOLON

    SEMICOLON       shift and go to state 112


state 78

    (72) unary_expression -> ASTERISK expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    ASSIGN          reduce using rule 72 (unary_expression -> ASTERISK expression .)
    DOUBLE_PIPE     reduce using rule 72 (unary_expression -> ASTERISK expression .)
    DOUBLE_AMPERSAND reduce using rule 72 (unary_expression -> ASTERISK expression .)
    EQ              reduce using rule 72 (unary_expression -> ASTERISK expression .)
    NOT_EQ          reduce using rule 72 (unary_expression -> ASTERISK expression .)
    LESS            reduce using rule 72 (unary_expression -> ASTERISK expression .)
    GREATER         reduce using rule 72 (unary_expression -> ASTERISK expression .)
    LESS_EQ         reduce using rule 72 (unary_expression -> ASTERISK expression .)
    GREATER_EQ      reduce using rule 72 (unary_expression -> ASTERISK expression .)
    PLUS            reduce using rule 72 (unary_expression -> ASTERISK expression .)
    MINUS           reduce using rule 72 (unary_expression -> ASTERISK expression .)
    ASTERISK        reduce using rule 72 (unary_expression -> ASTERISK expression .)
    DIV             reduce using rule 72 (unary_expression -> ASTERISK expression .)
    EQ_PLUS         reduce using rule 72 (unary_expression -> ASTERISK expression .)
    EQ_MINUS        reduce using rule 72 (unary_expression -> ASTERISK expression .)
    EQ_TIMES        reduce using rule 72 (unary_expression -> ASTERISK expression .)
    EQ_DIV          reduce using rule 72 (unary_expression -> ASTERISK expression .)
    RPAREN          reduce using rule 72 (unary_expression -> ASTERISK expression .)
    COMMA           reduce using rule 72 (unary_expression -> ASTERISK expression .)
    SEMICOLON       reduce using rule 72 (unary_expression -> ASTERISK expression .)
    LBRACE          reduce using rule 72 (unary_expression -> ASTERISK expression .)

  ! ASSIGN          [ shift and go to state 79 ]
  ! DOUBLE_PIPE     [ shift and go to state 66 ]
  ! DOUBLE_AMPERSAND [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 63 ]
  ! NOT_EQ          [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 64 ]
  ! GREATER         [ shift and go to state 59 ]
  ! LESS_EQ         [ shift and go to state 58 ]
  ! GREATER_EQ      [ shift and go to state 68 ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 67 ]
  ! ASTERISK        [ shift and go to state 65 ]
  ! DIV             [ shift and go to state 73 ]
  ! EQ_PLUS         [ shift and go to state 60 ]
  ! EQ_MINUS        [ shift and go to state 71 ]
  ! EQ_TIMES        [ shift and go to state 74 ]
  ! EQ_DIV          [ shift and go to state 62 ]


state 79

    (49) binary_expression -> expression ASSIGN . expression
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 113
    binary_expression              shift and go to state 32

state 80

    (23) declarator -> direct_declarator COMMA declarator .

    SEMICOLON       reduce using rule 23 (declarator -> direct_declarator COMMA declarator .)
    LBRACE          reduce using rule 23 (declarator -> direct_declarator COMMA declarator .)


state 81

    (30) parameter_list -> type_specifier . expression
    (31) parameter_list -> type_specifier . expression COMMA parameter_list
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    binary_expression              shift and go to state 32
    postfix_expression             shift and go to state 23
    unary_expression               shift and go to state 17
    primary_expression             shift and go to state 28
    expression                     shift and go to state 114
    string_literal                 shift and go to state 21

state 82

    (28) direct_declarator -> direct_declarator LPAREN RPAREN .

    COMMA           reduce using rule 28 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 28 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SEMICOLON       reduce using rule 28 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LBRACE          reduce using rule 28 (direct_declarator -> direct_declarator LPAREN RPAREN .)


state 83

    (29) parameter_type_list -> parameter_list .

    RPAREN          reduce using rule 29 (parameter_type_list -> parameter_list .)


state 84

    (27) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 115


state 85

    (76) postfix_expression -> primary_expression LPAREN RPAREN .

    COMMA           reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    ASSIGN          reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    DOUBLE_PIPE     reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    EQ              reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    NOT_EQ          reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    LESS            reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    GREATER         reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    LESS_EQ         reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    GREATER_EQ      reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    PLUS            reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    MINUS           reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    ASTERISK        reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    DIV             reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    EQ_PLUS         reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    EQ_MINUS        reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    EQ_TIMES        reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    EQ_DIV          reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    LBRACE          reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 76 (postfix_expression -> primary_expression LPAREN RPAREN .)


state 86

    (75) postfix_expression -> primary_expression LPAREN argument_expression_list . RPAREN

    RPAREN          shift and go to state 116


state 87

    (77) argument_expression_list -> expression .
    (78) argument_expression_list -> expression . COMMA argument_expression_list
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    RPAREN          reduce using rule 77 (argument_expression_list -> expression .)
    COMMA           shift and go to state 117
    ASSIGN          shift and go to state 79
    DOUBLE_PIPE     shift and go to state 66
    DOUBLE_AMPERSAND shift and go to state 61
    EQ              shift and go to state 63
    NOT_EQ          shift and go to state 70
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73
    EQ_PLUS         shift and go to state 60
    EQ_MINUS        shift and go to state 71
    EQ_TIMES        shift and go to state 74
    EQ_DIV          shift and go to state 62


state 88

    (84) primary_expression -> LPAREN expression RPAREN .

    DOUBLE_PLUS     reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    DOUBLE_MINUS    reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    DOUBLE_PIPE     reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    LESS_EQ         reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    GREATER_EQ      reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    ASTERISK        reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    EQ_PLUS         reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    EQ_MINUS        reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    EQ_TIMES        reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    EQ_DIV          reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 84 (primary_expression -> LPAREN expression RPAREN .)


state 89

    (33) compound_statement -> LBRACE declaration_list_opt . statement_list RBRACE
    (34) compound_statement -> LBRACE declaration_list_opt . RBRACE
    (35) statement_list -> . statement
    (36) statement_list -> . statement statement_list
    (37) statement -> . compound_statement
    (38) statement -> . jump_statement
    (39) statement -> . iteration_statement
    (40) statement -> . selection_statement
    (41) statement -> . expression_statement
    (42) statement -> . label
    (33) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (34) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (86) jump_statement -> . RETURN SEMICOLON
    (87) jump_statement -> . RETURN expression SEMICOLON
    (88) jump_statement -> . BREAK SEMICOLON
    (89) jump_statement -> . CONTINUE SEMICOLON
    (90) jump_statement -> . GOTO ID SEMICOLON
    (91) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (92) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (93) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (94) selection_statement -> . IF LPAREN expression RPAREN statement
    (95) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (44) expression_statement -> . expression SEMICOLON
    (43) label -> . ID COLON
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    RBRACE          shift and go to state 128
    LBRACE          shift and go to state 57
    RETURN          shift and go to state 120
    BREAK           shift and go to state 133
    CONTINUE        shift and go to state 134
    GOTO            shift and go to state 123
    WHILE           shift and go to state 121
    DO              shift and go to state 119
    FOR             shift and go to state 129
    IF              shift and go to state 131
    ID              shift and go to state 130
    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    jump_statement                 shift and go to state 132
    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    compound_statement             shift and go to state 124
    expression                     shift and go to state 136
    selection_statement            shift and go to state 125
    postfix_expression             shift and go to state 23
    label                          shift and go to state 126
    expression_statement           shift and go to state 118
    primary_expression             shift and go to state 28
    statement                      shift and go to state 127
    statement_list                 shift and go to state 135
    iteration_statement            shift and go to state 122
    string_literal                 shift and go to state 21

state 90

    (11) declaration_list_opt -> declaration_list .

    RBRACE          reduce using rule 11 (declaration_list_opt -> declaration_list .)
    LBRACE          reduce using rule 11 (declaration_list_opt -> declaration_list .)
    RETURN          reduce using rule 11 (declaration_list_opt -> declaration_list .)
    BREAK           reduce using rule 11 (declaration_list_opt -> declaration_list .)
    CONTINUE        reduce using rule 11 (declaration_list_opt -> declaration_list .)
    GOTO            reduce using rule 11 (declaration_list_opt -> declaration_list .)
    WHILE           reduce using rule 11 (declaration_list_opt -> declaration_list .)
    DO              reduce using rule 11 (declaration_list_opt -> declaration_list .)
    FOR             reduce using rule 11 (declaration_list_opt -> declaration_list .)
    IF              reduce using rule 11 (declaration_list_opt -> declaration_list .)
    ID              reduce using rule 11 (declaration_list_opt -> declaration_list .)
    PLUS            reduce using rule 11 (declaration_list_opt -> declaration_list .)
    DOUBLE_PLUS     reduce using rule 11 (declaration_list_opt -> declaration_list .)
    DOUBLE_MINUS    reduce using rule 11 (declaration_list_opt -> declaration_list .)
    MINUS           reduce using rule 11 (declaration_list_opt -> declaration_list .)
    ASTERISK        reduce using rule 11 (declaration_list_opt -> declaration_list .)
    EXCLAMATION     reduce using rule 11 (declaration_list_opt -> declaration_list .)
    AMPERSAND       reduce using rule 11 (declaration_list_opt -> declaration_list .)
    INUMBER         reduce using rule 11 (declaration_list_opt -> declaration_list .)
    FNUMBER         reduce using rule 11 (declaration_list_opt -> declaration_list .)
    CHARACTER       reduce using rule 11 (declaration_list_opt -> declaration_list .)
    LPAREN          reduce using rule 11 (declaration_list_opt -> declaration_list .)
    STRING          reduce using rule 11 (declaration_list_opt -> declaration_list .)


state 91

    (8) declaration -> type_specifier . declarator SEMICOLON
    (21) declarator -> . direct_declarator
    (22) declarator -> . expression ASSIGN expression
    (23) declarator -> . direct_declarator COMMA declarator
    (24) declarator -> . expression ASSIGN expression COMMA declarator
    (25) declarator -> . ASTERISK declarator
    (26) direct_declarator -> . ID
    (27) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (28) direct_declarator -> . direct_declarator LPAREN RPAREN
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    ASTERISK        shift and go to state 26
    ID              shift and go to state 30
    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    direct_declarator              shift and go to state 25
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    declarator                     shift and go to state 137
    expression                     shift and go to state 35
    string_literal                 shift and go to state 21

state 92

    (12) declaration_list -> declaration .
    (13) declaration_list -> declaration . declaration_list
    (12) declaration_list -> . declaration
    (13) declaration_list -> . declaration declaration_list
    (8) declaration -> . type_specifier declarator SEMICOLON
    (9) declaration -> . EXTERN type_specifier declarator SEMICOLON
    (14) type_specifier -> . INT
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . empty
    (17) type_specifier -> . VOID
    (18) type_specifier -> . FLOAT
    (19) type_specifier -> . DOUBLE
    (20) type_specifier -> . LONG
    (96) empty -> .

  ! reduce/reduce conflict for ASTERISK resolved using rule 12 (declaration_list -> declaration .)
  ! reduce/reduce conflict for ID resolved using rule 12 (declaration_list -> declaration .)
  ! reduce/reduce conflict for PLUS resolved using rule 12 (declaration_list -> declaration .)
  ! reduce/reduce conflict for DOUBLE_PLUS resolved using rule 12 (declaration_list -> declaration .)
  ! reduce/reduce conflict for DOUBLE_MINUS resolved using rule 12 (declaration_list -> declaration .)
  ! reduce/reduce conflict for MINUS resolved using rule 12 (declaration_list -> declaration .)
  ! reduce/reduce conflict for EXCLAMATION resolved using rule 12 (declaration_list -> declaration .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 12 (declaration_list -> declaration .)
  ! reduce/reduce conflict for INUMBER resolved using rule 12 (declaration_list -> declaration .)
  ! reduce/reduce conflict for FNUMBER resolved using rule 12 (declaration_list -> declaration .)
  ! reduce/reduce conflict for CHARACTER resolved using rule 12 (declaration_list -> declaration .)
  ! reduce/reduce conflict for LPAREN resolved using rule 12 (declaration_list -> declaration .)
  ! reduce/reduce conflict for STRING resolved using rule 12 (declaration_list -> declaration .)
    RBRACE          reduce using rule 12 (declaration_list -> declaration .)
    LBRACE          reduce using rule 12 (declaration_list -> declaration .)
    RETURN          reduce using rule 12 (declaration_list -> declaration .)
    BREAK           reduce using rule 12 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 12 (declaration_list -> declaration .)
    GOTO            reduce using rule 12 (declaration_list -> declaration .)
    WHILE           reduce using rule 12 (declaration_list -> declaration .)
    DO              reduce using rule 12 (declaration_list -> declaration .)
    FOR             reduce using rule 12 (declaration_list -> declaration .)
    IF              reduce using rule 12 (declaration_list -> declaration .)
    ID              reduce using rule 12 (declaration_list -> declaration .)
    PLUS            reduce using rule 12 (declaration_list -> declaration .)
    DOUBLE_PLUS     reduce using rule 12 (declaration_list -> declaration .)
    DOUBLE_MINUS    reduce using rule 12 (declaration_list -> declaration .)
    MINUS           reduce using rule 12 (declaration_list -> declaration .)
    ASTERISK        reduce using rule 12 (declaration_list -> declaration .)
    EXCLAMATION     reduce using rule 12 (declaration_list -> declaration .)
    AMPERSAND       reduce using rule 12 (declaration_list -> declaration .)
    INUMBER         reduce using rule 12 (declaration_list -> declaration .)
    FNUMBER         reduce using rule 12 (declaration_list -> declaration .)
    CHARACTER       reduce using rule 12 (declaration_list -> declaration .)
    LPAREN          reduce using rule 12 (declaration_list -> declaration .)
    STRING          reduce using rule 12 (declaration_list -> declaration .)
    EXTERN          shift and go to state 14
    INT             shift and go to state 3
    CHAR            shift and go to state 8
    VOID            shift and go to state 5
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 4
    LONG            shift and go to state 6

  ! ASTERISK        [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]
  ! PLUS            [ reduce using rule 96 (empty -> .) ]
  ! DOUBLE_PLUS     [ reduce using rule 96 (empty -> .) ]
  ! DOUBLE_MINUS    [ reduce using rule 96 (empty -> .) ]
  ! MINUS           [ reduce using rule 96 (empty -> .) ]
  ! EXCLAMATION     [ reduce using rule 96 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 96 (empty -> .) ]
  ! INUMBER         [ reduce using rule 96 (empty -> .) ]
  ! FNUMBER         [ reduce using rule 96 (empty -> .) ]
  ! CHARACTER       [ reduce using rule 96 (empty -> .) ]
  ! LPAREN          [ reduce using rule 96 (empty -> .) ]
  ! STRING          [ reduce using rule 96 (empty -> .) ]

    declaration_list               shift and go to state 138
    type_specifier                 shift and go to state 91
    empty                          shift and go to state 12
    declaration                    shift and go to state 92

state 93

    (10) declaration_list_opt -> empty .
    (16) type_specifier -> empty .

  ! reduce/reduce conflict for ASTERISK resolved using rule 10 (declaration_list_opt -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 10 (declaration_list_opt -> empty .)
  ! reduce/reduce conflict for PLUS resolved using rule 10 (declaration_list_opt -> empty .)
  ! reduce/reduce conflict for DOUBLE_PLUS resolved using rule 10 (declaration_list_opt -> empty .)
  ! reduce/reduce conflict for DOUBLE_MINUS resolved using rule 10 (declaration_list_opt -> empty .)
  ! reduce/reduce conflict for MINUS resolved using rule 10 (declaration_list_opt -> empty .)
  ! reduce/reduce conflict for EXCLAMATION resolved using rule 10 (declaration_list_opt -> empty .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 10 (declaration_list_opt -> empty .)
  ! reduce/reduce conflict for INUMBER resolved using rule 10 (declaration_list_opt -> empty .)
  ! reduce/reduce conflict for FNUMBER resolved using rule 10 (declaration_list_opt -> empty .)
  ! reduce/reduce conflict for CHARACTER resolved using rule 10 (declaration_list_opt -> empty .)
  ! reduce/reduce conflict for LPAREN resolved using rule 10 (declaration_list_opt -> empty .)
  ! reduce/reduce conflict for STRING resolved using rule 10 (declaration_list_opt -> empty .)
    RBRACE          reduce using rule 10 (declaration_list_opt -> empty .)
    LBRACE          reduce using rule 10 (declaration_list_opt -> empty .)
    RETURN          reduce using rule 10 (declaration_list_opt -> empty .)
    BREAK           reduce using rule 10 (declaration_list_opt -> empty .)
    CONTINUE        reduce using rule 10 (declaration_list_opt -> empty .)
    GOTO            reduce using rule 10 (declaration_list_opt -> empty .)
    WHILE           reduce using rule 10 (declaration_list_opt -> empty .)
    DO              reduce using rule 10 (declaration_list_opt -> empty .)
    FOR             reduce using rule 10 (declaration_list_opt -> empty .)
    IF              reduce using rule 10 (declaration_list_opt -> empty .)
    ID              reduce using rule 10 (declaration_list_opt -> empty .)
    PLUS            reduce using rule 10 (declaration_list_opt -> empty .)
    DOUBLE_PLUS     reduce using rule 10 (declaration_list_opt -> empty .)
    DOUBLE_MINUS    reduce using rule 10 (declaration_list_opt -> empty .)
    MINUS           reduce using rule 10 (declaration_list_opt -> empty .)
    ASTERISK        reduce using rule 10 (declaration_list_opt -> empty .)
    EXCLAMATION     reduce using rule 10 (declaration_list_opt -> empty .)
    AMPERSAND       reduce using rule 10 (declaration_list_opt -> empty .)
    INUMBER         reduce using rule 10 (declaration_list_opt -> empty .)
    FNUMBER         reduce using rule 10 (declaration_list_opt -> empty .)
    CHARACTER       reduce using rule 10 (declaration_list_opt -> empty .)
    LPAREN          reduce using rule 10 (declaration_list_opt -> empty .)
    STRING          reduce using rule 10 (declaration_list_opt -> empty .)

  ! ASTERISK        [ reduce using rule 16 (type_specifier -> empty .) ]
  ! ID              [ reduce using rule 16 (type_specifier -> empty .) ]
  ! PLUS            [ reduce using rule 16 (type_specifier -> empty .) ]
  ! DOUBLE_PLUS     [ reduce using rule 16 (type_specifier -> empty .) ]
  ! DOUBLE_MINUS    [ reduce using rule 16 (type_specifier -> empty .) ]
  ! MINUS           [ reduce using rule 16 (type_specifier -> empty .) ]
  ! EXCLAMATION     [ reduce using rule 16 (type_specifier -> empty .) ]
  ! AMPERSAND       [ reduce using rule 16 (type_specifier -> empty .) ]
  ! INUMBER         [ reduce using rule 16 (type_specifier -> empty .) ]
  ! FNUMBER         [ reduce using rule 16 (type_specifier -> empty .) ]
  ! CHARACTER       [ reduce using rule 16 (type_specifier -> empty .) ]
  ! LPAREN          [ reduce using rule 16 (type_specifier -> empty .) ]
  ! STRING          [ reduce using rule 16 (type_specifier -> empty .) ]


state 94

    (56) binary_expression -> expression LESS_EQ expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    ASSIGN          reduce using rule 56 (binary_expression -> expression LESS_EQ expression .)
    DOUBLE_PIPE     reduce using rule 56 (binary_expression -> expression LESS_EQ expression .)
    DOUBLE_AMPERSAND reduce using rule 56 (binary_expression -> expression LESS_EQ expression .)
    EQ              reduce using rule 56 (binary_expression -> expression LESS_EQ expression .)
    NOT_EQ          reduce using rule 56 (binary_expression -> expression LESS_EQ expression .)
    LESS            reduce using rule 56 (binary_expression -> expression LESS_EQ expression .)
    GREATER         reduce using rule 56 (binary_expression -> expression LESS_EQ expression .)
    LESS_EQ         reduce using rule 56 (binary_expression -> expression LESS_EQ expression .)
    GREATER_EQ      reduce using rule 56 (binary_expression -> expression LESS_EQ expression .)
    EQ_PLUS         reduce using rule 56 (binary_expression -> expression LESS_EQ expression .)
    EQ_MINUS        reduce using rule 56 (binary_expression -> expression LESS_EQ expression .)
    EQ_TIMES        reduce using rule 56 (binary_expression -> expression LESS_EQ expression .)
    EQ_DIV          reduce using rule 56 (binary_expression -> expression LESS_EQ expression .)
    SEMICOLON       reduce using rule 56 (binary_expression -> expression LESS_EQ expression .)
    RPAREN          reduce using rule 56 (binary_expression -> expression LESS_EQ expression .)
    COMMA           reduce using rule 56 (binary_expression -> expression LESS_EQ expression .)
    LBRACE          reduce using rule 56 (binary_expression -> expression LESS_EQ expression .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73

  ! PLUS            [ reduce using rule 56 (binary_expression -> expression LESS_EQ expression .) ]
  ! MINUS           [ reduce using rule 56 (binary_expression -> expression LESS_EQ expression .) ]
  ! ASTERISK        [ reduce using rule 56 (binary_expression -> expression LESS_EQ expression .) ]
  ! DIV             [ reduce using rule 56 (binary_expression -> expression LESS_EQ expression .) ]
  ! ASSIGN          [ shift and go to state 79 ]
  ! DOUBLE_PIPE     [ shift and go to state 66 ]
  ! DOUBLE_AMPERSAND [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 63 ]
  ! NOT_EQ          [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 64 ]
  ! GREATER         [ shift and go to state 59 ]
  ! LESS_EQ         [ shift and go to state 58 ]
  ! GREATER_EQ      [ shift and go to state 68 ]
  ! EQ_PLUS         [ shift and go to state 60 ]
  ! EQ_MINUS        [ shift and go to state 71 ]
  ! EQ_TIMES        [ shift and go to state 74 ]
  ! EQ_DIV          [ shift and go to state 62 ]


state 95

    (55) binary_expression -> expression GREATER expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    ASSIGN          reduce using rule 55 (binary_expression -> expression GREATER expression .)
    DOUBLE_PIPE     reduce using rule 55 (binary_expression -> expression GREATER expression .)
    DOUBLE_AMPERSAND reduce using rule 55 (binary_expression -> expression GREATER expression .)
    EQ              reduce using rule 55 (binary_expression -> expression GREATER expression .)
    NOT_EQ          reduce using rule 55 (binary_expression -> expression GREATER expression .)
    LESS            reduce using rule 55 (binary_expression -> expression GREATER expression .)
    GREATER         reduce using rule 55 (binary_expression -> expression GREATER expression .)
    LESS_EQ         reduce using rule 55 (binary_expression -> expression GREATER expression .)
    GREATER_EQ      reduce using rule 55 (binary_expression -> expression GREATER expression .)
    EQ_PLUS         reduce using rule 55 (binary_expression -> expression GREATER expression .)
    EQ_MINUS        reduce using rule 55 (binary_expression -> expression GREATER expression .)
    EQ_TIMES        reduce using rule 55 (binary_expression -> expression GREATER expression .)
    EQ_DIV          reduce using rule 55 (binary_expression -> expression GREATER expression .)
    SEMICOLON       reduce using rule 55 (binary_expression -> expression GREATER expression .)
    RPAREN          reduce using rule 55 (binary_expression -> expression GREATER expression .)
    COMMA           reduce using rule 55 (binary_expression -> expression GREATER expression .)
    LBRACE          reduce using rule 55 (binary_expression -> expression GREATER expression .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73

  ! PLUS            [ reduce using rule 55 (binary_expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 55 (binary_expression -> expression GREATER expression .) ]
  ! ASTERISK        [ reduce using rule 55 (binary_expression -> expression GREATER expression .) ]
  ! DIV             [ reduce using rule 55 (binary_expression -> expression GREATER expression .) ]
  ! ASSIGN          [ shift and go to state 79 ]
  ! DOUBLE_PIPE     [ shift and go to state 66 ]
  ! DOUBLE_AMPERSAND [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 63 ]
  ! NOT_EQ          [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 64 ]
  ! GREATER         [ shift and go to state 59 ]
  ! LESS_EQ         [ shift and go to state 58 ]
  ! GREATER_EQ      [ shift and go to state 68 ]
  ! EQ_PLUS         [ shift and go to state 60 ]
  ! EQ_MINUS        [ shift and go to state 71 ]
  ! EQ_TIMES        [ shift and go to state 74 ]
  ! EQ_DIV          [ shift and go to state 62 ]


state 96

    (62) binary_expression -> expression EQ_PLUS expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    SEMICOLON       reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .)
    RPAREN          reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .)
    COMMA           reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .)
    LBRACE          reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .)
    ASSIGN          shift and go to state 79
    DOUBLE_PIPE     shift and go to state 66
    DOUBLE_AMPERSAND shift and go to state 61
    EQ              shift and go to state 63
    NOT_EQ          shift and go to state 70
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73
    EQ_PLUS         shift and go to state 60
    EQ_MINUS        shift and go to state 71
    EQ_TIMES        shift and go to state 74
    EQ_DIV          shift and go to state 62

  ! ASSIGN          [ reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .) ]
  ! DOUBLE_PIPE     [ reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .) ]
  ! EQ              [ reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .) ]
  ! NOT_EQ          [ reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .) ]
  ! LESS            [ reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .) ]
  ! GREATER         [ reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .) ]
  ! LESS_EQ         [ reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .) ]
  ! GREATER_EQ      [ reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .) ]
  ! PLUS            [ reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .) ]
  ! MINUS           [ reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .) ]
  ! ASTERISK        [ reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .) ]
  ! DIV             [ reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .) ]
  ! EQ_PLUS         [ reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .) ]
  ! EQ_MINUS        [ reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .) ]
  ! EQ_TIMES        [ reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .) ]
  ! EQ_DIV          [ reduce using rule 62 (binary_expression -> expression EQ_PLUS expression .) ]


state 97

    (51) binary_expression -> expression DOUBLE_AMPERSAND expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    ASSIGN          reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .)
    DOUBLE_PIPE     reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .)
    DOUBLE_AMPERSAND reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .)
    EQ_PLUS         reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .)
    EQ_MINUS        reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .)
    EQ_TIMES        reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .)
    EQ_DIV          reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .)
    SEMICOLON       reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .)
    RPAREN          reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .)
    COMMA           reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .)
    LBRACE          reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .)
    EQ              shift and go to state 63
    NOT_EQ          shift and go to state 70
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73

  ! EQ              [ reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .) ]
  ! NOT_EQ          [ reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .) ]
  ! LESS            [ reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .) ]
  ! GREATER         [ reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .) ]
  ! LESS_EQ         [ reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .) ]
  ! GREATER_EQ      [ reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .) ]
  ! PLUS            [ reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .) ]
  ! MINUS           [ reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .) ]
  ! ASTERISK        [ reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .) ]
  ! DIV             [ reduce using rule 51 (binary_expression -> expression DOUBLE_AMPERSAND expression .) ]
  ! ASSIGN          [ shift and go to state 79 ]
  ! DOUBLE_PIPE     [ shift and go to state 66 ]
  ! DOUBLE_AMPERSAND [ shift and go to state 61 ]
  ! EQ_PLUS         [ shift and go to state 60 ]
  ! EQ_MINUS        [ shift and go to state 71 ]
  ! EQ_TIMES        [ shift and go to state 74 ]
  ! EQ_DIV          [ shift and go to state 62 ]


state 98

    (65) binary_expression -> expression EQ_DIV expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    SEMICOLON       reduce using rule 65 (binary_expression -> expression EQ_DIV expression .)
    RPAREN          reduce using rule 65 (binary_expression -> expression EQ_DIV expression .)
    COMMA           reduce using rule 65 (binary_expression -> expression EQ_DIV expression .)
    LBRACE          reduce using rule 65 (binary_expression -> expression EQ_DIV expression .)
    ASSIGN          shift and go to state 79
    DOUBLE_PIPE     shift and go to state 66
    DOUBLE_AMPERSAND shift and go to state 61
    EQ              shift and go to state 63
    NOT_EQ          shift and go to state 70
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73
    EQ_PLUS         shift and go to state 60
    EQ_MINUS        shift and go to state 71
    EQ_TIMES        shift and go to state 74
    EQ_DIV          shift and go to state 62

  ! ASSIGN          [ reduce using rule 65 (binary_expression -> expression EQ_DIV expression .) ]
  ! DOUBLE_PIPE     [ reduce using rule 65 (binary_expression -> expression EQ_DIV expression .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 65 (binary_expression -> expression EQ_DIV expression .) ]
  ! EQ              [ reduce using rule 65 (binary_expression -> expression EQ_DIV expression .) ]
  ! NOT_EQ          [ reduce using rule 65 (binary_expression -> expression EQ_DIV expression .) ]
  ! LESS            [ reduce using rule 65 (binary_expression -> expression EQ_DIV expression .) ]
  ! GREATER         [ reduce using rule 65 (binary_expression -> expression EQ_DIV expression .) ]
  ! LESS_EQ         [ reduce using rule 65 (binary_expression -> expression EQ_DIV expression .) ]
  ! GREATER_EQ      [ reduce using rule 65 (binary_expression -> expression EQ_DIV expression .) ]
  ! PLUS            [ reduce using rule 65 (binary_expression -> expression EQ_DIV expression .) ]
  ! MINUS           [ reduce using rule 65 (binary_expression -> expression EQ_DIV expression .) ]
  ! ASTERISK        [ reduce using rule 65 (binary_expression -> expression EQ_DIV expression .) ]
  ! DIV             [ reduce using rule 65 (binary_expression -> expression EQ_DIV expression .) ]
  ! EQ_PLUS         [ reduce using rule 65 (binary_expression -> expression EQ_DIV expression .) ]
  ! EQ_MINUS        [ reduce using rule 65 (binary_expression -> expression EQ_DIV expression .) ]
  ! EQ_TIMES        [ reduce using rule 65 (binary_expression -> expression EQ_DIV expression .) ]
  ! EQ_DIV          [ reduce using rule 65 (binary_expression -> expression EQ_DIV expression .) ]


state 99

    (52) binary_expression -> expression EQ expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    ASSIGN          reduce using rule 52 (binary_expression -> expression EQ expression .)
    DOUBLE_PIPE     reduce using rule 52 (binary_expression -> expression EQ expression .)
    DOUBLE_AMPERSAND reduce using rule 52 (binary_expression -> expression EQ expression .)
    EQ              reduce using rule 52 (binary_expression -> expression EQ expression .)
    NOT_EQ          reduce using rule 52 (binary_expression -> expression EQ expression .)
    EQ_PLUS         reduce using rule 52 (binary_expression -> expression EQ expression .)
    EQ_MINUS        reduce using rule 52 (binary_expression -> expression EQ expression .)
    EQ_TIMES        reduce using rule 52 (binary_expression -> expression EQ expression .)
    EQ_DIV          reduce using rule 52 (binary_expression -> expression EQ expression .)
    SEMICOLON       reduce using rule 52 (binary_expression -> expression EQ expression .)
    RPAREN          reduce using rule 52 (binary_expression -> expression EQ expression .)
    COMMA           reduce using rule 52 (binary_expression -> expression EQ expression .)
    LBRACE          reduce using rule 52 (binary_expression -> expression EQ expression .)
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73

  ! LESS            [ reduce using rule 52 (binary_expression -> expression EQ expression .) ]
  ! GREATER         [ reduce using rule 52 (binary_expression -> expression EQ expression .) ]
  ! LESS_EQ         [ reduce using rule 52 (binary_expression -> expression EQ expression .) ]
  ! GREATER_EQ      [ reduce using rule 52 (binary_expression -> expression EQ expression .) ]
  ! PLUS            [ reduce using rule 52 (binary_expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 52 (binary_expression -> expression EQ expression .) ]
  ! ASTERISK        [ reduce using rule 52 (binary_expression -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 52 (binary_expression -> expression EQ expression .) ]
  ! ASSIGN          [ shift and go to state 79 ]
  ! DOUBLE_PIPE     [ shift and go to state 66 ]
  ! DOUBLE_AMPERSAND [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 63 ]
  ! NOT_EQ          [ shift and go to state 70 ]
  ! EQ_PLUS         [ shift and go to state 60 ]
  ! EQ_MINUS        [ shift and go to state 71 ]
  ! EQ_TIMES        [ shift and go to state 74 ]
  ! EQ_DIV          [ shift and go to state 62 ]


state 100

    (54) binary_expression -> expression LESS expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    ASSIGN          reduce using rule 54 (binary_expression -> expression LESS expression .)
    DOUBLE_PIPE     reduce using rule 54 (binary_expression -> expression LESS expression .)
    DOUBLE_AMPERSAND reduce using rule 54 (binary_expression -> expression LESS expression .)
    EQ              reduce using rule 54 (binary_expression -> expression LESS expression .)
    NOT_EQ          reduce using rule 54 (binary_expression -> expression LESS expression .)
    LESS            reduce using rule 54 (binary_expression -> expression LESS expression .)
    GREATER         reduce using rule 54 (binary_expression -> expression LESS expression .)
    LESS_EQ         reduce using rule 54 (binary_expression -> expression LESS expression .)
    GREATER_EQ      reduce using rule 54 (binary_expression -> expression LESS expression .)
    EQ_PLUS         reduce using rule 54 (binary_expression -> expression LESS expression .)
    EQ_MINUS        reduce using rule 54 (binary_expression -> expression LESS expression .)
    EQ_TIMES        reduce using rule 54 (binary_expression -> expression LESS expression .)
    EQ_DIV          reduce using rule 54 (binary_expression -> expression LESS expression .)
    SEMICOLON       reduce using rule 54 (binary_expression -> expression LESS expression .)
    RPAREN          reduce using rule 54 (binary_expression -> expression LESS expression .)
    COMMA           reduce using rule 54 (binary_expression -> expression LESS expression .)
    LBRACE          reduce using rule 54 (binary_expression -> expression LESS expression .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73

  ! PLUS            [ reduce using rule 54 (binary_expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 54 (binary_expression -> expression LESS expression .) ]
  ! ASTERISK        [ reduce using rule 54 (binary_expression -> expression LESS expression .) ]
  ! DIV             [ reduce using rule 54 (binary_expression -> expression LESS expression .) ]
  ! ASSIGN          [ shift and go to state 79 ]
  ! DOUBLE_PIPE     [ shift and go to state 66 ]
  ! DOUBLE_AMPERSAND [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 63 ]
  ! NOT_EQ          [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 64 ]
  ! GREATER         [ shift and go to state 59 ]
  ! LESS_EQ         [ shift and go to state 58 ]
  ! GREATER_EQ      [ shift and go to state 68 ]
  ! EQ_PLUS         [ shift and go to state 60 ]
  ! EQ_MINUS        [ shift and go to state 71 ]
  ! EQ_TIMES        [ shift and go to state 74 ]
  ! EQ_DIV          [ shift and go to state 62 ]


state 101

    (60) binary_expression -> expression ASTERISK expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    ASSIGN          reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    DOUBLE_PIPE     reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    DOUBLE_AMPERSAND reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    EQ              reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    NOT_EQ          reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    LESS            reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    GREATER         reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    LESS_EQ         reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    GREATER_EQ      reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    PLUS            reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    MINUS           reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    ASTERISK        reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    DIV             reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    EQ_PLUS         reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    EQ_MINUS        reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    EQ_TIMES        reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    EQ_DIV          reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    SEMICOLON       reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    RPAREN          reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    COMMA           reduce using rule 60 (binary_expression -> expression ASTERISK expression .)
    LBRACE          reduce using rule 60 (binary_expression -> expression ASTERISK expression .)

  ! ASSIGN          [ shift and go to state 79 ]
  ! DOUBLE_PIPE     [ shift and go to state 66 ]
  ! DOUBLE_AMPERSAND [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 63 ]
  ! NOT_EQ          [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 64 ]
  ! GREATER         [ shift and go to state 59 ]
  ! LESS_EQ         [ shift and go to state 58 ]
  ! GREATER_EQ      [ shift and go to state 68 ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 67 ]
  ! ASTERISK        [ shift and go to state 65 ]
  ! DIV             [ shift and go to state 73 ]
  ! EQ_PLUS         [ shift and go to state 60 ]
  ! EQ_MINUS        [ shift and go to state 71 ]
  ! EQ_TIMES        [ shift and go to state 74 ]
  ! EQ_DIV          [ shift and go to state 62 ]


state 102

    (50) binary_expression -> expression DOUBLE_PIPE expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    ASSIGN          reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .)
    DOUBLE_PIPE     reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .)
    EQ_PLUS         reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .)
    EQ_MINUS        reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .)
    EQ_TIMES        reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .)
    EQ_DIV          reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .)
    SEMICOLON       reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .)
    RPAREN          reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .)
    COMMA           reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .)
    LBRACE          reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .)
    DOUBLE_AMPERSAND shift and go to state 61
    EQ              shift and go to state 63
    NOT_EQ          shift and go to state 70
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73

  ! DOUBLE_AMPERSAND [ reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .) ]
  ! EQ              [ reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .) ]
  ! NOT_EQ          [ reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .) ]
  ! LESS            [ reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .) ]
  ! GREATER         [ reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .) ]
  ! LESS_EQ         [ reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .) ]
  ! GREATER_EQ      [ reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .) ]
  ! PLUS            [ reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .) ]
  ! MINUS           [ reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .) ]
  ! ASTERISK        [ reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .) ]
  ! DIV             [ reduce using rule 50 (binary_expression -> expression DOUBLE_PIPE expression .) ]
  ! ASSIGN          [ shift and go to state 79 ]
  ! DOUBLE_PIPE     [ shift and go to state 66 ]
  ! EQ_PLUS         [ shift and go to state 60 ]
  ! EQ_MINUS        [ shift and go to state 71 ]
  ! EQ_TIMES        [ shift and go to state 74 ]
  ! EQ_DIV          [ shift and go to state 62 ]


state 103

    (59) binary_expression -> expression MINUS expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    ASSIGN          reduce using rule 59 (binary_expression -> expression MINUS expression .)
    DOUBLE_PIPE     reduce using rule 59 (binary_expression -> expression MINUS expression .)
    DOUBLE_AMPERSAND reduce using rule 59 (binary_expression -> expression MINUS expression .)
    EQ              reduce using rule 59 (binary_expression -> expression MINUS expression .)
    NOT_EQ          reduce using rule 59 (binary_expression -> expression MINUS expression .)
    LESS            reduce using rule 59 (binary_expression -> expression MINUS expression .)
    GREATER         reduce using rule 59 (binary_expression -> expression MINUS expression .)
    LESS_EQ         reduce using rule 59 (binary_expression -> expression MINUS expression .)
    GREATER_EQ      reduce using rule 59 (binary_expression -> expression MINUS expression .)
    PLUS            reduce using rule 59 (binary_expression -> expression MINUS expression .)
    MINUS           reduce using rule 59 (binary_expression -> expression MINUS expression .)
    EQ_PLUS         reduce using rule 59 (binary_expression -> expression MINUS expression .)
    EQ_MINUS        reduce using rule 59 (binary_expression -> expression MINUS expression .)
    EQ_TIMES        reduce using rule 59 (binary_expression -> expression MINUS expression .)
    EQ_DIV          reduce using rule 59 (binary_expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 59 (binary_expression -> expression MINUS expression .)
    RPAREN          reduce using rule 59 (binary_expression -> expression MINUS expression .)
    COMMA           reduce using rule 59 (binary_expression -> expression MINUS expression .)
    LBRACE          reduce using rule 59 (binary_expression -> expression MINUS expression .)
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73

  ! ASTERISK        [ reduce using rule 59 (binary_expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 59 (binary_expression -> expression MINUS expression .) ]
  ! ASSIGN          [ shift and go to state 79 ]
  ! DOUBLE_PIPE     [ shift and go to state 66 ]
  ! DOUBLE_AMPERSAND [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 63 ]
  ! NOT_EQ          [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 64 ]
  ! GREATER         [ shift and go to state 59 ]
  ! LESS_EQ         [ shift and go to state 58 ]
  ! GREATER_EQ      [ shift and go to state 68 ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 67 ]
  ! EQ_PLUS         [ shift and go to state 60 ]
  ! EQ_MINUS        [ shift and go to state 71 ]
  ! EQ_TIMES        [ shift and go to state 74 ]
  ! EQ_DIV          [ shift and go to state 62 ]


state 104

    (57) binary_expression -> expression GREATER_EQ expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    ASSIGN          reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .)
    DOUBLE_PIPE     reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .)
    DOUBLE_AMPERSAND reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .)
    EQ              reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .)
    NOT_EQ          reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .)
    LESS            reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .)
    GREATER         reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .)
    LESS_EQ         reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .)
    GREATER_EQ      reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .)
    EQ_PLUS         reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .)
    EQ_MINUS        reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .)
    EQ_TIMES        reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .)
    EQ_DIV          reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .)
    SEMICOLON       reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .)
    RPAREN          reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .)
    COMMA           reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .)
    LBRACE          reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73

  ! PLUS            [ reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .) ]
  ! MINUS           [ reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .) ]
  ! ASTERISK        [ reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .) ]
  ! DIV             [ reduce using rule 57 (binary_expression -> expression GREATER_EQ expression .) ]
  ! ASSIGN          [ shift and go to state 79 ]
  ! DOUBLE_PIPE     [ shift and go to state 66 ]
  ! DOUBLE_AMPERSAND [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 63 ]
  ! NOT_EQ          [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 64 ]
  ! GREATER         [ shift and go to state 59 ]
  ! LESS_EQ         [ shift and go to state 58 ]
  ! GREATER_EQ      [ shift and go to state 68 ]
  ! EQ_PLUS         [ shift and go to state 60 ]
  ! EQ_MINUS        [ shift and go to state 71 ]
  ! EQ_TIMES        [ shift and go to state 74 ]
  ! EQ_DIV          [ shift and go to state 62 ]


state 105

    (58) binary_expression -> expression PLUS expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    ASSIGN          reduce using rule 58 (binary_expression -> expression PLUS expression .)
    DOUBLE_PIPE     reduce using rule 58 (binary_expression -> expression PLUS expression .)
    DOUBLE_AMPERSAND reduce using rule 58 (binary_expression -> expression PLUS expression .)
    EQ              reduce using rule 58 (binary_expression -> expression PLUS expression .)
    NOT_EQ          reduce using rule 58 (binary_expression -> expression PLUS expression .)
    LESS            reduce using rule 58 (binary_expression -> expression PLUS expression .)
    GREATER         reduce using rule 58 (binary_expression -> expression PLUS expression .)
    LESS_EQ         reduce using rule 58 (binary_expression -> expression PLUS expression .)
    GREATER_EQ      reduce using rule 58 (binary_expression -> expression PLUS expression .)
    PLUS            reduce using rule 58 (binary_expression -> expression PLUS expression .)
    MINUS           reduce using rule 58 (binary_expression -> expression PLUS expression .)
    EQ_PLUS         reduce using rule 58 (binary_expression -> expression PLUS expression .)
    EQ_MINUS        reduce using rule 58 (binary_expression -> expression PLUS expression .)
    EQ_TIMES        reduce using rule 58 (binary_expression -> expression PLUS expression .)
    EQ_DIV          reduce using rule 58 (binary_expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 58 (binary_expression -> expression PLUS expression .)
    RPAREN          reduce using rule 58 (binary_expression -> expression PLUS expression .)
    COMMA           reduce using rule 58 (binary_expression -> expression PLUS expression .)
    LBRACE          reduce using rule 58 (binary_expression -> expression PLUS expression .)
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73

  ! ASTERISK        [ reduce using rule 58 (binary_expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 58 (binary_expression -> expression PLUS expression .) ]
  ! ASSIGN          [ shift and go to state 79 ]
  ! DOUBLE_PIPE     [ shift and go to state 66 ]
  ! DOUBLE_AMPERSAND [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 63 ]
  ! NOT_EQ          [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 64 ]
  ! GREATER         [ shift and go to state 59 ]
  ! LESS_EQ         [ shift and go to state 58 ]
  ! GREATER_EQ      [ shift and go to state 68 ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 67 ]
  ! EQ_PLUS         [ shift and go to state 60 ]
  ! EQ_MINUS        [ shift and go to state 71 ]
  ! EQ_TIMES        [ shift and go to state 74 ]
  ! EQ_DIV          [ shift and go to state 62 ]


state 106

    (53) binary_expression -> expression NOT_EQ expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    ASSIGN          reduce using rule 53 (binary_expression -> expression NOT_EQ expression .)
    DOUBLE_PIPE     reduce using rule 53 (binary_expression -> expression NOT_EQ expression .)
    DOUBLE_AMPERSAND reduce using rule 53 (binary_expression -> expression NOT_EQ expression .)
    EQ              reduce using rule 53 (binary_expression -> expression NOT_EQ expression .)
    NOT_EQ          reduce using rule 53 (binary_expression -> expression NOT_EQ expression .)
    EQ_PLUS         reduce using rule 53 (binary_expression -> expression NOT_EQ expression .)
    EQ_MINUS        reduce using rule 53 (binary_expression -> expression NOT_EQ expression .)
    EQ_TIMES        reduce using rule 53 (binary_expression -> expression NOT_EQ expression .)
    EQ_DIV          reduce using rule 53 (binary_expression -> expression NOT_EQ expression .)
    SEMICOLON       reduce using rule 53 (binary_expression -> expression NOT_EQ expression .)
    RPAREN          reduce using rule 53 (binary_expression -> expression NOT_EQ expression .)
    COMMA           reduce using rule 53 (binary_expression -> expression NOT_EQ expression .)
    LBRACE          reduce using rule 53 (binary_expression -> expression NOT_EQ expression .)
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73

  ! LESS            [ reduce using rule 53 (binary_expression -> expression NOT_EQ expression .) ]
  ! GREATER         [ reduce using rule 53 (binary_expression -> expression NOT_EQ expression .) ]
  ! LESS_EQ         [ reduce using rule 53 (binary_expression -> expression NOT_EQ expression .) ]
  ! GREATER_EQ      [ reduce using rule 53 (binary_expression -> expression NOT_EQ expression .) ]
  ! PLUS            [ reduce using rule 53 (binary_expression -> expression NOT_EQ expression .) ]
  ! MINUS           [ reduce using rule 53 (binary_expression -> expression NOT_EQ expression .) ]
  ! ASTERISK        [ reduce using rule 53 (binary_expression -> expression NOT_EQ expression .) ]
  ! DIV             [ reduce using rule 53 (binary_expression -> expression NOT_EQ expression .) ]
  ! ASSIGN          [ shift and go to state 79 ]
  ! DOUBLE_PIPE     [ shift and go to state 66 ]
  ! DOUBLE_AMPERSAND [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 63 ]
  ! NOT_EQ          [ shift and go to state 70 ]
  ! EQ_PLUS         [ shift and go to state 60 ]
  ! EQ_MINUS        [ shift and go to state 71 ]
  ! EQ_TIMES        [ shift and go to state 74 ]
  ! EQ_DIV          [ shift and go to state 62 ]


state 107

    (63) binary_expression -> expression EQ_MINUS expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    SEMICOLON       reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .)
    RPAREN          reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .)
    COMMA           reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .)
    LBRACE          reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .)
    ASSIGN          shift and go to state 79
    DOUBLE_PIPE     shift and go to state 66
    DOUBLE_AMPERSAND shift and go to state 61
    EQ              shift and go to state 63
    NOT_EQ          shift and go to state 70
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73
    EQ_PLUS         shift and go to state 60
    EQ_MINUS        shift and go to state 71
    EQ_TIMES        shift and go to state 74
    EQ_DIV          shift and go to state 62

  ! ASSIGN          [ reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .) ]
  ! DOUBLE_PIPE     [ reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .) ]
  ! EQ              [ reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .) ]
  ! NOT_EQ          [ reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .) ]
  ! LESS            [ reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .) ]
  ! GREATER         [ reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .) ]
  ! LESS_EQ         [ reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .) ]
  ! GREATER_EQ      [ reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .) ]
  ! PLUS            [ reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .) ]
  ! MINUS           [ reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .) ]
  ! ASTERISK        [ reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .) ]
  ! DIV             [ reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .) ]
  ! EQ_PLUS         [ reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .) ]
  ! EQ_MINUS        [ reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .) ]
  ! EQ_TIMES        [ reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .) ]
  ! EQ_DIV          [ reduce using rule 63 (binary_expression -> expression EQ_MINUS expression .) ]


state 108

    (22) declarator -> expression ASSIGN expression .
    (24) declarator -> expression ASSIGN expression . COMMA declarator
    (49) binary_expression -> expression ASSIGN expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    SEMICOLON       reduce using rule 22 (declarator -> expression ASSIGN expression .)
    LBRACE          reduce using rule 22 (declarator -> expression ASSIGN expression .)
    COMMA           shift and go to state 139
    ASSIGN          shift and go to state 79
    DOUBLE_PIPE     shift and go to state 66
    DOUBLE_AMPERSAND shift and go to state 61
    EQ              shift and go to state 63
    NOT_EQ          shift and go to state 70
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73
    EQ_PLUS         shift and go to state 60
    EQ_MINUS        shift and go to state 71
    EQ_TIMES        shift and go to state 74
    EQ_DIV          shift and go to state 62

  ! ASSIGN          [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! DOUBLE_PIPE     [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! EQ              [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! NOT_EQ          [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! LESS            [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! GREATER         [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! LESS_EQ         [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! GREATER_EQ      [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! ASTERISK        [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! DIV             [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! EQ_PLUS         [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! EQ_MINUS        [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! EQ_TIMES        [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! EQ_DIV          [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]


state 109

    (61) binary_expression -> expression DIV expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    ASSIGN          reduce using rule 61 (binary_expression -> expression DIV expression .)
    DOUBLE_PIPE     reduce using rule 61 (binary_expression -> expression DIV expression .)
    DOUBLE_AMPERSAND reduce using rule 61 (binary_expression -> expression DIV expression .)
    EQ              reduce using rule 61 (binary_expression -> expression DIV expression .)
    NOT_EQ          reduce using rule 61 (binary_expression -> expression DIV expression .)
    LESS            reduce using rule 61 (binary_expression -> expression DIV expression .)
    GREATER         reduce using rule 61 (binary_expression -> expression DIV expression .)
    LESS_EQ         reduce using rule 61 (binary_expression -> expression DIV expression .)
    GREATER_EQ      reduce using rule 61 (binary_expression -> expression DIV expression .)
    PLUS            reduce using rule 61 (binary_expression -> expression DIV expression .)
    MINUS           reduce using rule 61 (binary_expression -> expression DIV expression .)
    ASTERISK        reduce using rule 61 (binary_expression -> expression DIV expression .)
    DIV             reduce using rule 61 (binary_expression -> expression DIV expression .)
    EQ_PLUS         reduce using rule 61 (binary_expression -> expression DIV expression .)
    EQ_MINUS        reduce using rule 61 (binary_expression -> expression DIV expression .)
    EQ_TIMES        reduce using rule 61 (binary_expression -> expression DIV expression .)
    EQ_DIV          reduce using rule 61 (binary_expression -> expression DIV expression .)
    SEMICOLON       reduce using rule 61 (binary_expression -> expression DIV expression .)
    RPAREN          reduce using rule 61 (binary_expression -> expression DIV expression .)
    COMMA           reduce using rule 61 (binary_expression -> expression DIV expression .)
    LBRACE          reduce using rule 61 (binary_expression -> expression DIV expression .)

  ! ASSIGN          [ shift and go to state 79 ]
  ! DOUBLE_PIPE     [ shift and go to state 66 ]
  ! DOUBLE_AMPERSAND [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 63 ]
  ! NOT_EQ          [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 64 ]
  ! GREATER         [ shift and go to state 59 ]
  ! LESS_EQ         [ shift and go to state 58 ]
  ! GREATER_EQ      [ shift and go to state 68 ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 67 ]
  ! ASTERISK        [ shift and go to state 65 ]
  ! DIV             [ shift and go to state 73 ]
  ! EQ_PLUS         [ shift and go to state 60 ]
  ! EQ_MINUS        [ shift and go to state 71 ]
  ! EQ_TIMES        [ shift and go to state 74 ]
  ! EQ_DIV          [ shift and go to state 62 ]


state 110

    (64) binary_expression -> expression EQ_TIMES expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    SEMICOLON       reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .)
    RPAREN          reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .)
    COMMA           reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .)
    LBRACE          reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .)
    ASSIGN          shift and go to state 79
    DOUBLE_PIPE     shift and go to state 66
    DOUBLE_AMPERSAND shift and go to state 61
    EQ              shift and go to state 63
    NOT_EQ          shift and go to state 70
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73
    EQ_PLUS         shift and go to state 60
    EQ_MINUS        shift and go to state 71
    EQ_TIMES        shift and go to state 74
    EQ_DIV          shift and go to state 62

  ! ASSIGN          [ reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .) ]
  ! DOUBLE_PIPE     [ reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .) ]
  ! EQ              [ reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .) ]
  ! NOT_EQ          [ reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .) ]
  ! LESS            [ reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .) ]
  ! GREATER         [ reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .) ]
  ! LESS_EQ         [ reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .) ]
  ! GREATER_EQ      [ reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .) ]
  ! PLUS            [ reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .) ]
  ! MINUS           [ reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .) ]
  ! ASTERISK        [ reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .) ]
  ! DIV             [ reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .) ]
  ! EQ_PLUS         [ reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .) ]
  ! EQ_MINUS        [ reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .) ]
  ! EQ_TIMES        [ reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .) ]
  ! EQ_DIV          [ reduce using rule 64 (binary_expression -> expression EQ_TIMES expression .) ]


state 111

    (7) function_definition -> STATIC type_specifier declarator compound_statement .

    STATIC          reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    EXTERN          reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    INT             reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    CHAR            reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    VOID            reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    FLOAT           reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    DOUBLE          reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    LONG            reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    ASTERISK        reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    ID              reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    PLUS            reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    DOUBLE_PLUS     reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    DOUBLE_MINUS    reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    MINUS           reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    EXCLAMATION     reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    AMPERSAND       reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    INUMBER         reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    FNUMBER         reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    CHARACTER       reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    LPAREN          reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    STRING          reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)
    $end            reduce using rule 7 (function_definition -> STATIC type_specifier declarator compound_statement .)


state 112

    (9) declaration -> EXTERN type_specifier declarator SEMICOLON .

    EXTERN          reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    INT             reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    CHAR            reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    VOID            reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    FLOAT           reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    DOUBLE          reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    LONG            reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    ASTERISK        reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    ID              reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    PLUS            reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    DOUBLE_PLUS     reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    DOUBLE_MINUS    reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    MINUS           reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    EXCLAMATION     reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    AMPERSAND       reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    INUMBER         reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    FNUMBER         reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    CHARACTER       reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    LPAREN          reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    STRING          reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    RBRACE          reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    LBRACE          reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    RETURN          reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    BREAK           reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    CONTINUE        reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    GOTO            reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    WHILE           reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    DO              reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    FOR             reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    IF              reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    STATIC          reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    $end            reduce using rule 9 (declaration -> EXTERN type_specifier declarator SEMICOLON .)


state 113

    (49) binary_expression -> expression ASSIGN expression .
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    SEMICOLON       reduce using rule 49 (binary_expression -> expression ASSIGN expression .)
    RPAREN          reduce using rule 49 (binary_expression -> expression ASSIGN expression .)
    COMMA           reduce using rule 49 (binary_expression -> expression ASSIGN expression .)
    LBRACE          reduce using rule 49 (binary_expression -> expression ASSIGN expression .)
    ASSIGN          shift and go to state 79
    DOUBLE_PIPE     shift and go to state 66
    DOUBLE_AMPERSAND shift and go to state 61
    EQ              shift and go to state 63
    NOT_EQ          shift and go to state 70
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73
    EQ_PLUS         shift and go to state 60
    EQ_MINUS        shift and go to state 71
    EQ_TIMES        shift and go to state 74
    EQ_DIV          shift and go to state 62

  ! ASSIGN          [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! DOUBLE_PIPE     [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! EQ              [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! NOT_EQ          [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! LESS            [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! GREATER         [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! LESS_EQ         [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! GREATER_EQ      [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! ASTERISK        [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! DIV             [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! EQ_PLUS         [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! EQ_MINUS        [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! EQ_TIMES        [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]
  ! EQ_DIV          [ reduce using rule 49 (binary_expression -> expression ASSIGN expression .) ]


state 114

    (30) parameter_list -> type_specifier expression .
    (31) parameter_list -> type_specifier expression . COMMA parameter_list
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    RPAREN          reduce using rule 30 (parameter_list -> type_specifier expression .)
    COMMA           shift and go to state 140
    ASSIGN          shift and go to state 79
    DOUBLE_PIPE     shift and go to state 66
    DOUBLE_AMPERSAND shift and go to state 61
    EQ              shift and go to state 63
    NOT_EQ          shift and go to state 70
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73
    EQ_PLUS         shift and go to state 60
    EQ_MINUS        shift and go to state 71
    EQ_TIMES        shift and go to state 74
    EQ_DIV          shift and go to state 62


state 115

    (27) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    COMMA           reduce using rule 27 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 27 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMICOLON       reduce using rule 27 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LBRACE          reduce using rule 27 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)


state 116

    (75) postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .

    COMMA           reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    ASSIGN          reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    DOUBLE_PIPE     reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    NOT_EQ          reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    LESS            reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    GREATER         reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    LESS_EQ         reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    GREATER_EQ      reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    ASTERISK        reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    DIV             reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    EQ_PLUS         reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    EQ_MINUS        reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    EQ_TIMES        reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    EQ_DIV          reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    SEMICOLON       reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    LBRACE          reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 75 (postfix_expression -> primary_expression LPAREN argument_expression_list RPAREN .)


state 117

    (78) argument_expression_list -> expression COMMA . argument_expression_list
    (77) argument_expression_list -> . expression
    (78) argument_expression_list -> . expression COMMA argument_expression_list
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    argument_expression_list       shift and go to state 141
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 87
    string_literal                 shift and go to state 21

state 118

    (41) statement -> expression_statement .

    LBRACE          reduce using rule 41 (statement -> expression_statement .)
    RETURN          reduce using rule 41 (statement -> expression_statement .)
    BREAK           reduce using rule 41 (statement -> expression_statement .)
    CONTINUE        reduce using rule 41 (statement -> expression_statement .)
    GOTO            reduce using rule 41 (statement -> expression_statement .)
    WHILE           reduce using rule 41 (statement -> expression_statement .)
    DO              reduce using rule 41 (statement -> expression_statement .)
    FOR             reduce using rule 41 (statement -> expression_statement .)
    IF              reduce using rule 41 (statement -> expression_statement .)
    ID              reduce using rule 41 (statement -> expression_statement .)
    PLUS            reduce using rule 41 (statement -> expression_statement .)
    DOUBLE_PLUS     reduce using rule 41 (statement -> expression_statement .)
    DOUBLE_MINUS    reduce using rule 41 (statement -> expression_statement .)
    MINUS           reduce using rule 41 (statement -> expression_statement .)
    ASTERISK        reduce using rule 41 (statement -> expression_statement .)
    EXCLAMATION     reduce using rule 41 (statement -> expression_statement .)
    AMPERSAND       reduce using rule 41 (statement -> expression_statement .)
    INUMBER         reduce using rule 41 (statement -> expression_statement .)
    FNUMBER         reduce using rule 41 (statement -> expression_statement .)
    CHARACTER       reduce using rule 41 (statement -> expression_statement .)
    LPAREN          reduce using rule 41 (statement -> expression_statement .)
    STRING          reduce using rule 41 (statement -> expression_statement .)
    RBRACE          reduce using rule 41 (statement -> expression_statement .)
    ELSE            reduce using rule 41 (statement -> expression_statement .)


state 119

    (92) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMICOLON
    (37) statement -> . compound_statement
    (38) statement -> . jump_statement
    (39) statement -> . iteration_statement
    (40) statement -> . selection_statement
    (41) statement -> . expression_statement
    (42) statement -> . label
    (33) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (34) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (86) jump_statement -> . RETURN SEMICOLON
    (87) jump_statement -> . RETURN expression SEMICOLON
    (88) jump_statement -> . BREAK SEMICOLON
    (89) jump_statement -> . CONTINUE SEMICOLON
    (90) jump_statement -> . GOTO ID SEMICOLON
    (91) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (92) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (93) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (94) selection_statement -> . IF LPAREN expression RPAREN statement
    (95) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (44) expression_statement -> . expression SEMICOLON
    (43) label -> . ID COLON
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    LBRACE          shift and go to state 57
    RETURN          shift and go to state 120
    BREAK           shift and go to state 133
    CONTINUE        shift and go to state 134
    GOTO            shift and go to state 123
    WHILE           shift and go to state 121
    DO              shift and go to state 119
    FOR             shift and go to state 129
    IF              shift and go to state 131
    ID              shift and go to state 130
    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    jump_statement                 shift and go to state 132
    expression_statement           shift and go to state 118
    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    compound_statement             shift and go to state 124
    expression                     shift and go to state 136
    selection_statement            shift and go to state 125
    postfix_expression             shift and go to state 23
    label                          shift and go to state 126
    primary_expression             shift and go to state 28
    statement                      shift and go to state 142
    iteration_statement            shift and go to state 122
    string_literal                 shift and go to state 21

state 120

    (86) jump_statement -> RETURN . SEMICOLON
    (87) jump_statement -> RETURN . expression SEMICOLON
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    SEMICOLON       shift and go to state 143
    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    string_literal                 shift and go to state 21
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 144
    binary_expression              shift and go to state 32

state 121

    (91) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 145


state 122

    (39) statement -> iteration_statement .

    LBRACE          reduce using rule 39 (statement -> iteration_statement .)
    RETURN          reduce using rule 39 (statement -> iteration_statement .)
    BREAK           reduce using rule 39 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 39 (statement -> iteration_statement .)
    GOTO            reduce using rule 39 (statement -> iteration_statement .)
    WHILE           reduce using rule 39 (statement -> iteration_statement .)
    DO              reduce using rule 39 (statement -> iteration_statement .)
    FOR             reduce using rule 39 (statement -> iteration_statement .)
    IF              reduce using rule 39 (statement -> iteration_statement .)
    ID              reduce using rule 39 (statement -> iteration_statement .)
    PLUS            reduce using rule 39 (statement -> iteration_statement .)
    DOUBLE_PLUS     reduce using rule 39 (statement -> iteration_statement .)
    DOUBLE_MINUS    reduce using rule 39 (statement -> iteration_statement .)
    MINUS           reduce using rule 39 (statement -> iteration_statement .)
    ASTERISK        reduce using rule 39 (statement -> iteration_statement .)
    EXCLAMATION     reduce using rule 39 (statement -> iteration_statement .)
    AMPERSAND       reduce using rule 39 (statement -> iteration_statement .)
    INUMBER         reduce using rule 39 (statement -> iteration_statement .)
    FNUMBER         reduce using rule 39 (statement -> iteration_statement .)
    CHARACTER       reduce using rule 39 (statement -> iteration_statement .)
    LPAREN          reduce using rule 39 (statement -> iteration_statement .)
    STRING          reduce using rule 39 (statement -> iteration_statement .)
    RBRACE          reduce using rule 39 (statement -> iteration_statement .)
    ELSE            reduce using rule 39 (statement -> iteration_statement .)


state 123

    (90) jump_statement -> GOTO . ID SEMICOLON

    ID              shift and go to state 146


state 124

    (37) statement -> compound_statement .

    LBRACE          reduce using rule 37 (statement -> compound_statement .)
    RETURN          reduce using rule 37 (statement -> compound_statement .)
    BREAK           reduce using rule 37 (statement -> compound_statement .)
    CONTINUE        reduce using rule 37 (statement -> compound_statement .)
    GOTO            reduce using rule 37 (statement -> compound_statement .)
    WHILE           reduce using rule 37 (statement -> compound_statement .)
    DO              reduce using rule 37 (statement -> compound_statement .)
    FOR             reduce using rule 37 (statement -> compound_statement .)
    IF              reduce using rule 37 (statement -> compound_statement .)
    ID              reduce using rule 37 (statement -> compound_statement .)
    PLUS            reduce using rule 37 (statement -> compound_statement .)
    DOUBLE_PLUS     reduce using rule 37 (statement -> compound_statement .)
    DOUBLE_MINUS    reduce using rule 37 (statement -> compound_statement .)
    MINUS           reduce using rule 37 (statement -> compound_statement .)
    ASTERISK        reduce using rule 37 (statement -> compound_statement .)
    EXCLAMATION     reduce using rule 37 (statement -> compound_statement .)
    AMPERSAND       reduce using rule 37 (statement -> compound_statement .)
    INUMBER         reduce using rule 37 (statement -> compound_statement .)
    FNUMBER         reduce using rule 37 (statement -> compound_statement .)
    CHARACTER       reduce using rule 37 (statement -> compound_statement .)
    LPAREN          reduce using rule 37 (statement -> compound_statement .)
    STRING          reduce using rule 37 (statement -> compound_statement .)
    RBRACE          reduce using rule 37 (statement -> compound_statement .)
    ELSE            reduce using rule 37 (statement -> compound_statement .)


state 125

    (40) statement -> selection_statement .

    LBRACE          reduce using rule 40 (statement -> selection_statement .)
    RETURN          reduce using rule 40 (statement -> selection_statement .)
    BREAK           reduce using rule 40 (statement -> selection_statement .)
    CONTINUE        reduce using rule 40 (statement -> selection_statement .)
    GOTO            reduce using rule 40 (statement -> selection_statement .)
    WHILE           reduce using rule 40 (statement -> selection_statement .)
    DO              reduce using rule 40 (statement -> selection_statement .)
    FOR             reduce using rule 40 (statement -> selection_statement .)
    IF              reduce using rule 40 (statement -> selection_statement .)
    ID              reduce using rule 40 (statement -> selection_statement .)
    PLUS            reduce using rule 40 (statement -> selection_statement .)
    DOUBLE_PLUS     reduce using rule 40 (statement -> selection_statement .)
    DOUBLE_MINUS    reduce using rule 40 (statement -> selection_statement .)
    MINUS           reduce using rule 40 (statement -> selection_statement .)
    ASTERISK        reduce using rule 40 (statement -> selection_statement .)
    EXCLAMATION     reduce using rule 40 (statement -> selection_statement .)
    AMPERSAND       reduce using rule 40 (statement -> selection_statement .)
    INUMBER         reduce using rule 40 (statement -> selection_statement .)
    FNUMBER         reduce using rule 40 (statement -> selection_statement .)
    CHARACTER       reduce using rule 40 (statement -> selection_statement .)
    LPAREN          reduce using rule 40 (statement -> selection_statement .)
    STRING          reduce using rule 40 (statement -> selection_statement .)
    RBRACE          reduce using rule 40 (statement -> selection_statement .)
    ELSE            reduce using rule 40 (statement -> selection_statement .)


state 126

    (42) statement -> label .

    LBRACE          reduce using rule 42 (statement -> label .)
    RETURN          reduce using rule 42 (statement -> label .)
    BREAK           reduce using rule 42 (statement -> label .)
    CONTINUE        reduce using rule 42 (statement -> label .)
    GOTO            reduce using rule 42 (statement -> label .)
    WHILE           reduce using rule 42 (statement -> label .)
    DO              reduce using rule 42 (statement -> label .)
    FOR             reduce using rule 42 (statement -> label .)
    IF              reduce using rule 42 (statement -> label .)
    ID              reduce using rule 42 (statement -> label .)
    PLUS            reduce using rule 42 (statement -> label .)
    DOUBLE_PLUS     reduce using rule 42 (statement -> label .)
    DOUBLE_MINUS    reduce using rule 42 (statement -> label .)
    MINUS           reduce using rule 42 (statement -> label .)
    ASTERISK        reduce using rule 42 (statement -> label .)
    EXCLAMATION     reduce using rule 42 (statement -> label .)
    AMPERSAND       reduce using rule 42 (statement -> label .)
    INUMBER         reduce using rule 42 (statement -> label .)
    FNUMBER         reduce using rule 42 (statement -> label .)
    CHARACTER       reduce using rule 42 (statement -> label .)
    LPAREN          reduce using rule 42 (statement -> label .)
    STRING          reduce using rule 42 (statement -> label .)
    RBRACE          reduce using rule 42 (statement -> label .)
    ELSE            reduce using rule 42 (statement -> label .)


state 127

    (35) statement_list -> statement .
    (36) statement_list -> statement . statement_list
    (35) statement_list -> . statement
    (36) statement_list -> . statement statement_list
    (37) statement -> . compound_statement
    (38) statement -> . jump_statement
    (39) statement -> . iteration_statement
    (40) statement -> . selection_statement
    (41) statement -> . expression_statement
    (42) statement -> . label
    (33) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (34) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (86) jump_statement -> . RETURN SEMICOLON
    (87) jump_statement -> . RETURN expression SEMICOLON
    (88) jump_statement -> . BREAK SEMICOLON
    (89) jump_statement -> . CONTINUE SEMICOLON
    (90) jump_statement -> . GOTO ID SEMICOLON
    (91) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (92) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (93) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (94) selection_statement -> . IF LPAREN expression RPAREN statement
    (95) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (44) expression_statement -> . expression SEMICOLON
    (43) label -> . ID COLON
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    RBRACE          reduce using rule 35 (statement_list -> statement .)
    LBRACE          shift and go to state 57
    RETURN          shift and go to state 120
    BREAK           shift and go to state 133
    CONTINUE        shift and go to state 134
    GOTO            shift and go to state 123
    WHILE           shift and go to state 121
    DO              shift and go to state 119
    FOR             shift and go to state 129
    IF              shift and go to state 131
    ID              shift and go to state 130
    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    jump_statement                 shift and go to state 132
    expression_statement           shift and go to state 118
    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    compound_statement             shift and go to state 124
    expression                     shift and go to state 136
    selection_statement            shift and go to state 125
    postfix_expression             shift and go to state 23
    label                          shift and go to state 126
    primary_expression             shift and go to state 28
    statement                      shift and go to state 127
    statement_list                 shift and go to state 147
    iteration_statement            shift and go to state 122
    string_literal                 shift and go to state 21

state 128

    (34) compound_statement -> LBRACE declaration_list_opt RBRACE .

    STATIC          reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    EXTERN          reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    INT             reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    CHAR            reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    VOID            reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    FLOAT           reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    DOUBLE          reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    LONG            reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    ASTERISK        reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    ID              reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    PLUS            reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    DOUBLE_PLUS     reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    DOUBLE_MINUS    reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    MINUS           reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    EXCLAMATION     reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    AMPERSAND       reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    INUMBER         reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    FNUMBER         reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    CHARACTER       reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    LPAREN          reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    STRING          reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    $end            reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    WHILE           reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    LBRACE          reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    RETURN          reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    BREAK           reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    CONTINUE        reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    GOTO            reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    DO              reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    FOR             reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    IF              reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    RBRACE          reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    ELSE            reduce using rule 34 (compound_statement -> LBRACE declaration_list_opt RBRACE .)


state 129

    (93) iteration_statement -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement

    LPAREN          shift and go to state 148


state 130

    (43) label -> ID . COLON
    (79) primary_expression -> ID .

    COLON           shift and go to state 149
    DOUBLE_PLUS     reduce using rule 79 (primary_expression -> ID .)
    DOUBLE_MINUS    reduce using rule 79 (primary_expression -> ID .)
    LPAREN          reduce using rule 79 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 79 (primary_expression -> ID .)
    ASSIGN          reduce using rule 79 (primary_expression -> ID .)
    DOUBLE_PIPE     reduce using rule 79 (primary_expression -> ID .)
    DOUBLE_AMPERSAND reduce using rule 79 (primary_expression -> ID .)
    EQ              reduce using rule 79 (primary_expression -> ID .)
    NOT_EQ          reduce using rule 79 (primary_expression -> ID .)
    LESS            reduce using rule 79 (primary_expression -> ID .)
    GREATER         reduce using rule 79 (primary_expression -> ID .)
    LESS_EQ         reduce using rule 79 (primary_expression -> ID .)
    GREATER_EQ      reduce using rule 79 (primary_expression -> ID .)
    PLUS            reduce using rule 79 (primary_expression -> ID .)
    MINUS           reduce using rule 79 (primary_expression -> ID .)
    ASTERISK        reduce using rule 79 (primary_expression -> ID .)
    DIV             reduce using rule 79 (primary_expression -> ID .)
    EQ_PLUS         reduce using rule 79 (primary_expression -> ID .)
    EQ_MINUS        reduce using rule 79 (primary_expression -> ID .)
    EQ_TIMES        reduce using rule 79 (primary_expression -> ID .)
    EQ_DIV          reduce using rule 79 (primary_expression -> ID .)


state 131

    (94) selection_statement -> IF . LPAREN expression RPAREN statement
    (95) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 150


state 132

    (38) statement -> jump_statement .

    LBRACE          reduce using rule 38 (statement -> jump_statement .)
    RETURN          reduce using rule 38 (statement -> jump_statement .)
    BREAK           reduce using rule 38 (statement -> jump_statement .)
    CONTINUE        reduce using rule 38 (statement -> jump_statement .)
    GOTO            reduce using rule 38 (statement -> jump_statement .)
    WHILE           reduce using rule 38 (statement -> jump_statement .)
    DO              reduce using rule 38 (statement -> jump_statement .)
    FOR             reduce using rule 38 (statement -> jump_statement .)
    IF              reduce using rule 38 (statement -> jump_statement .)
    ID              reduce using rule 38 (statement -> jump_statement .)
    PLUS            reduce using rule 38 (statement -> jump_statement .)
    DOUBLE_PLUS     reduce using rule 38 (statement -> jump_statement .)
    DOUBLE_MINUS    reduce using rule 38 (statement -> jump_statement .)
    MINUS           reduce using rule 38 (statement -> jump_statement .)
    ASTERISK        reduce using rule 38 (statement -> jump_statement .)
    EXCLAMATION     reduce using rule 38 (statement -> jump_statement .)
    AMPERSAND       reduce using rule 38 (statement -> jump_statement .)
    INUMBER         reduce using rule 38 (statement -> jump_statement .)
    FNUMBER         reduce using rule 38 (statement -> jump_statement .)
    CHARACTER       reduce using rule 38 (statement -> jump_statement .)
    LPAREN          reduce using rule 38 (statement -> jump_statement .)
    STRING          reduce using rule 38 (statement -> jump_statement .)
    RBRACE          reduce using rule 38 (statement -> jump_statement .)
    ELSE            reduce using rule 38 (statement -> jump_statement .)


state 133

    (88) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 151


state 134

    (89) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 152


state 135

    (33) compound_statement -> LBRACE declaration_list_opt statement_list . RBRACE

    RBRACE          shift and go to state 153


state 136

    (44) expression_statement -> expression . SEMICOLON
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    SEMICOLON       shift and go to state 154
    ASSIGN          shift and go to state 79
    DOUBLE_PIPE     shift and go to state 66
    DOUBLE_AMPERSAND shift and go to state 61
    EQ              shift and go to state 63
    NOT_EQ          shift and go to state 70
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73
    EQ_PLUS         shift and go to state 60
    EQ_MINUS        shift and go to state 71
    EQ_TIMES        shift and go to state 74
    EQ_DIV          shift and go to state 62


state 137

    (8) declaration -> type_specifier declarator . SEMICOLON

    SEMICOLON       shift and go to state 55


state 138

    (13) declaration_list -> declaration declaration_list .

    RBRACE          reduce using rule 13 (declaration_list -> declaration declaration_list .)
    LBRACE          reduce using rule 13 (declaration_list -> declaration declaration_list .)
    RETURN          reduce using rule 13 (declaration_list -> declaration declaration_list .)
    BREAK           reduce using rule 13 (declaration_list -> declaration declaration_list .)
    CONTINUE        reduce using rule 13 (declaration_list -> declaration declaration_list .)
    GOTO            reduce using rule 13 (declaration_list -> declaration declaration_list .)
    WHILE           reduce using rule 13 (declaration_list -> declaration declaration_list .)
    DO              reduce using rule 13 (declaration_list -> declaration declaration_list .)
    FOR             reduce using rule 13 (declaration_list -> declaration declaration_list .)
    IF              reduce using rule 13 (declaration_list -> declaration declaration_list .)
    ID              reduce using rule 13 (declaration_list -> declaration declaration_list .)
    PLUS            reduce using rule 13 (declaration_list -> declaration declaration_list .)
    DOUBLE_PLUS     reduce using rule 13 (declaration_list -> declaration declaration_list .)
    DOUBLE_MINUS    reduce using rule 13 (declaration_list -> declaration declaration_list .)
    MINUS           reduce using rule 13 (declaration_list -> declaration declaration_list .)
    ASTERISK        reduce using rule 13 (declaration_list -> declaration declaration_list .)
    EXCLAMATION     reduce using rule 13 (declaration_list -> declaration declaration_list .)
    AMPERSAND       reduce using rule 13 (declaration_list -> declaration declaration_list .)
    INUMBER         reduce using rule 13 (declaration_list -> declaration declaration_list .)
    FNUMBER         reduce using rule 13 (declaration_list -> declaration declaration_list .)
    CHARACTER       reduce using rule 13 (declaration_list -> declaration declaration_list .)
    LPAREN          reduce using rule 13 (declaration_list -> declaration declaration_list .)
    STRING          reduce using rule 13 (declaration_list -> declaration declaration_list .)


state 139

    (24) declarator -> expression ASSIGN expression COMMA . declarator
    (21) declarator -> . direct_declarator
    (22) declarator -> . expression ASSIGN expression
    (23) declarator -> . direct_declarator COMMA declarator
    (24) declarator -> . expression ASSIGN expression COMMA declarator
    (25) declarator -> . ASTERISK declarator
    (26) direct_declarator -> . ID
    (27) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (28) direct_declarator -> . direct_declarator LPAREN RPAREN
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    ASTERISK        shift and go to state 26
    ID              shift and go to state 30
    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    direct_declarator              shift and go to state 25
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    declarator                     shift and go to state 155
    expression                     shift and go to state 35
    string_literal                 shift and go to state 21

state 140

    (31) parameter_list -> type_specifier expression COMMA . parameter_list
    (30) parameter_list -> . type_specifier expression
    (31) parameter_list -> . type_specifier expression COMMA parameter_list
    (14) type_specifier -> . INT
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . empty
    (17) type_specifier -> . VOID
    (18) type_specifier -> . FLOAT
    (19) type_specifier -> . DOUBLE
    (20) type_specifier -> . LONG
    (96) empty -> .

    INT             shift and go to state 3
    CHAR            shift and go to state 8
    VOID            shift and go to state 5
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 4
    LONG            shift and go to state 6
    PLUS            reduce using rule 96 (empty -> .)
    DOUBLE_PLUS     reduce using rule 96 (empty -> .)
    DOUBLE_MINUS    reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    ASTERISK        reduce using rule 96 (empty -> .)
    EXCLAMATION     reduce using rule 96 (empty -> .)
    AMPERSAND       reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)
    INUMBER         reduce using rule 96 (empty -> .)
    FNUMBER         reduce using rule 96 (empty -> .)
    CHARACTER       reduce using rule 96 (empty -> .)
    LPAREN          reduce using rule 96 (empty -> .)
    STRING          reduce using rule 96 (empty -> .)

    type_specifier                 shift and go to state 81
    empty                          shift and go to state 12
    parameter_list                 shift and go to state 156

state 141

    (78) argument_expression_list -> expression COMMA argument_expression_list .

    RPAREN          reduce using rule 78 (argument_expression_list -> expression COMMA argument_expression_list .)


state 142

    (92) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 157


state 143

    (86) jump_statement -> RETURN SEMICOLON .

    LBRACE          reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    GOTO            reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    DOUBLE_PLUS     reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    DOUBLE_MINUS    reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    ASTERISK        reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    EXCLAMATION     reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    AMPERSAND       reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    INUMBER         reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    FNUMBER         reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    CHARACTER       reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)


state 144

    (87) jump_statement -> RETURN expression . SEMICOLON
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    SEMICOLON       shift and go to state 158
    ASSIGN          shift and go to state 79
    DOUBLE_PIPE     shift and go to state 66
    DOUBLE_AMPERSAND shift and go to state 61
    EQ              shift and go to state 63
    NOT_EQ          shift and go to state 70
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73
    EQ_PLUS         shift and go to state 60
    EQ_MINUS        shift and go to state 71
    EQ_TIMES        shift and go to state 74
    EQ_DIV          shift and go to state 62


state 145

    (91) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 159
    string_literal                 shift and go to state 21

state 146

    (90) jump_statement -> GOTO ID . SEMICOLON

    SEMICOLON       shift and go to state 160


state 147

    (36) statement_list -> statement statement_list .

    RBRACE          reduce using rule 36 (statement_list -> statement statement_list .)


state 148

    (93) iteration_statement -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement
    (44) expression_statement -> . expression SEMICOLON
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    expression_statement           shift and go to state 161
    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 136
    string_literal                 shift and go to state 21

state 149

    (43) label -> ID COLON .

    WHILE           reduce using rule 43 (label -> ID COLON .)
    LBRACE          reduce using rule 43 (label -> ID COLON .)
    RETURN          reduce using rule 43 (label -> ID COLON .)
    BREAK           reduce using rule 43 (label -> ID COLON .)
    CONTINUE        reduce using rule 43 (label -> ID COLON .)
    GOTO            reduce using rule 43 (label -> ID COLON .)
    DO              reduce using rule 43 (label -> ID COLON .)
    FOR             reduce using rule 43 (label -> ID COLON .)
    IF              reduce using rule 43 (label -> ID COLON .)
    ID              reduce using rule 43 (label -> ID COLON .)
    PLUS            reduce using rule 43 (label -> ID COLON .)
    DOUBLE_PLUS     reduce using rule 43 (label -> ID COLON .)
    DOUBLE_MINUS    reduce using rule 43 (label -> ID COLON .)
    MINUS           reduce using rule 43 (label -> ID COLON .)
    ASTERISK        reduce using rule 43 (label -> ID COLON .)
    EXCLAMATION     reduce using rule 43 (label -> ID COLON .)
    AMPERSAND       reduce using rule 43 (label -> ID COLON .)
    INUMBER         reduce using rule 43 (label -> ID COLON .)
    FNUMBER         reduce using rule 43 (label -> ID COLON .)
    CHARACTER       reduce using rule 43 (label -> ID COLON .)
    LPAREN          reduce using rule 43 (label -> ID COLON .)
    STRING          reduce using rule 43 (label -> ID COLON .)
    RBRACE          reduce using rule 43 (label -> ID COLON .)
    ELSE            reduce using rule 43 (label -> ID COLON .)


state 150

    (94) selection_statement -> IF LPAREN . expression RPAREN statement
    (95) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 162
    string_literal                 shift and go to state 21

state 151

    (88) jump_statement -> BREAK SEMICOLON .

    LBRACE          reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    GOTO            reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    DOUBLE_PLUS     reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    DOUBLE_MINUS    reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    ASTERISK        reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    EXCLAMATION     reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    AMPERSAND       reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    INUMBER         reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    FNUMBER         reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    CHARACTER       reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 88 (jump_statement -> BREAK SEMICOLON .)


state 152

    (89) jump_statement -> CONTINUE SEMICOLON .

    LBRACE          reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLE_PLUS     reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLE_MINUS    reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    ASTERISK        reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    EXCLAMATION     reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    AMPERSAND       reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    INUMBER         reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    FNUMBER         reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    CHARACTER       reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 89 (jump_statement -> CONTINUE SEMICOLON .)


state 153

    (33) compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .

    STATIC          reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    EXTERN          reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    INT             reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    CHAR            reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    VOID            reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    FLOAT           reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    DOUBLE          reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    LONG            reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    ASTERISK        reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    ID              reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    PLUS            reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    DOUBLE_PLUS     reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    DOUBLE_MINUS    reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    MINUS           reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    EXCLAMATION     reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    AMPERSAND       reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    INUMBER         reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    FNUMBER         reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    CHARACTER       reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    LPAREN          reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    STRING          reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    $end            reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    WHILE           reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    LBRACE          reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    RETURN          reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    BREAK           reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    CONTINUE        reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    GOTO            reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    DO              reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    FOR             reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    IF              reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    RBRACE          reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    ELSE            reduce using rule 33 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)


state 154

    (44) expression_statement -> expression SEMICOLON .

    LBRACE          reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    GOTO            reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    ID              reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    PLUS            reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    DOUBLE_PLUS     reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    DOUBLE_MINUS    reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    ASTERISK        reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    EXCLAMATION     reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    AMPERSAND       reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    INUMBER         reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    FNUMBER         reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    CHARACTER       reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 44 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 44 (expression_statement -> expression SEMICOLON .)


state 155

    (24) declarator -> expression ASSIGN expression COMMA declarator .

    SEMICOLON       reduce using rule 24 (declarator -> expression ASSIGN expression COMMA declarator .)
    LBRACE          reduce using rule 24 (declarator -> expression ASSIGN expression COMMA declarator .)


state 156

    (31) parameter_list -> type_specifier expression COMMA parameter_list .

    RPAREN          reduce using rule 31 (parameter_list -> type_specifier expression COMMA parameter_list .)


state 157

    (92) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 163


state 158

    (87) jump_statement -> RETURN expression SEMICOLON .

    LBRACE          reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    GOTO            reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    ID              reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLE_PLUS     reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLE_MINUS    reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    ASTERISK        reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    EXCLAMATION     reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    AMPERSAND       reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    INUMBER         reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    FNUMBER         reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    CHARACTER       reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 87 (jump_statement -> RETURN expression SEMICOLON .)


state 159

    (91) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    RPAREN          shift and go to state 164
    ASSIGN          shift and go to state 79
    DOUBLE_PIPE     shift and go to state 66
    DOUBLE_AMPERSAND shift and go to state 61
    EQ              shift and go to state 63
    NOT_EQ          shift and go to state 70
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73
    EQ_PLUS         shift and go to state 60
    EQ_MINUS        shift and go to state 71
    EQ_TIMES        shift and go to state 74
    EQ_DIV          shift and go to state 62


state 160

    (90) jump_statement -> GOTO ID SEMICOLON .

    LBRACE          reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    RETURN          reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    BREAK           reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    CONTINUE        reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    GOTO            reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    WHILE           reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    DO              reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    FOR             reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    IF              reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    ID              reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    PLUS            reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    DOUBLE_PLUS     reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    DOUBLE_MINUS    reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    MINUS           reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    ASTERISK        reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    EXCLAMATION     reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    AMPERSAND       reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    INUMBER         reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    FNUMBER         reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    CHARACTER       reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    LPAREN          reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    STRING          reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    RBRACE          reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)
    ELSE            reduce using rule 90 (jump_statement -> GOTO ID SEMICOLON .)


state 161

    (93) iteration_statement -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement
    (44) expression_statement -> . expression SEMICOLON
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    expression_statement           shift and go to state 165
    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 136
    string_literal                 shift and go to state 21

state 162

    (94) selection_statement -> IF LPAREN expression . RPAREN statement
    (95) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    RPAREN          shift and go to state 166
    ASSIGN          shift and go to state 79
    DOUBLE_PIPE     shift and go to state 66
    DOUBLE_AMPERSAND shift and go to state 61
    EQ              shift and go to state 63
    NOT_EQ          shift and go to state 70
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73
    EQ_PLUS         shift and go to state 60
    EQ_MINUS        shift and go to state 71
    EQ_TIMES        shift and go to state 74
    EQ_DIV          shift and go to state 62


state 163

    (92) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMICOLON
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 167
    string_literal                 shift and go to state 21

state 164

    (91) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (37) statement -> . compound_statement
    (38) statement -> . jump_statement
    (39) statement -> . iteration_statement
    (40) statement -> . selection_statement
    (41) statement -> . expression_statement
    (42) statement -> . label
    (33) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (34) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (86) jump_statement -> . RETURN SEMICOLON
    (87) jump_statement -> . RETURN expression SEMICOLON
    (88) jump_statement -> . BREAK SEMICOLON
    (89) jump_statement -> . CONTINUE SEMICOLON
    (90) jump_statement -> . GOTO ID SEMICOLON
    (91) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (92) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (93) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (94) selection_statement -> . IF LPAREN expression RPAREN statement
    (95) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (44) expression_statement -> . expression SEMICOLON
    (43) label -> . ID COLON
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    LBRACE          shift and go to state 57
    RETURN          shift and go to state 120
    BREAK           shift and go to state 133
    CONTINUE        shift and go to state 134
    GOTO            shift and go to state 123
    WHILE           shift and go to state 121
    DO              shift and go to state 119
    FOR             shift and go to state 129
    IF              shift and go to state 131
    ID              shift and go to state 130
    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    jump_statement                 shift and go to state 132
    expression_statement           shift and go to state 118
    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    compound_statement             shift and go to state 124
    expression                     shift and go to state 136
    selection_statement            shift and go to state 125
    postfix_expression             shift and go to state 23
    label                          shift and go to state 126
    primary_expression             shift and go to state 28
    statement                      shift and go to state 168
    iteration_statement            shift and go to state 122
    string_literal                 shift and go to state 21

state 165

    (93) iteration_statement -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    ID              shift and go to state 41
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    postfix_expression             shift and go to state 23
    primary_expression             shift and go to state 28
    expression                     shift and go to state 169
    string_literal                 shift and go to state 21

state 166

    (94) selection_statement -> IF LPAREN expression RPAREN . statement
    (95) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (37) statement -> . compound_statement
    (38) statement -> . jump_statement
    (39) statement -> . iteration_statement
    (40) statement -> . selection_statement
    (41) statement -> . expression_statement
    (42) statement -> . label
    (33) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (34) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (86) jump_statement -> . RETURN SEMICOLON
    (87) jump_statement -> . RETURN expression SEMICOLON
    (88) jump_statement -> . BREAK SEMICOLON
    (89) jump_statement -> . CONTINUE SEMICOLON
    (90) jump_statement -> . GOTO ID SEMICOLON
    (91) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (92) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (93) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (94) selection_statement -> . IF LPAREN expression RPAREN statement
    (95) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (44) expression_statement -> . expression SEMICOLON
    (43) label -> . ID COLON
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    LBRACE          shift and go to state 57
    RETURN          shift and go to state 120
    BREAK           shift and go to state 133
    CONTINUE        shift and go to state 134
    GOTO            shift and go to state 123
    WHILE           shift and go to state 121
    DO              shift and go to state 119
    FOR             shift and go to state 129
    IF              shift and go to state 131
    ID              shift and go to state 130
    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    jump_statement                 shift and go to state 132
    expression_statement           shift and go to state 118
    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    compound_statement             shift and go to state 124
    expression                     shift and go to state 136
    selection_statement            shift and go to state 125
    postfix_expression             shift and go to state 23
    label                          shift and go to state 126
    primary_expression             shift and go to state 28
    statement                      shift and go to state 170
    iteration_statement            shift and go to state 122
    string_literal                 shift and go to state 21

state 167

    (92) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMICOLON
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    RPAREN          shift and go to state 171
    ASSIGN          shift and go to state 79
    DOUBLE_PIPE     shift and go to state 66
    DOUBLE_AMPERSAND shift and go to state 61
    EQ              shift and go to state 63
    NOT_EQ          shift and go to state 70
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73
    EQ_PLUS         shift and go to state 60
    EQ_MINUS        shift and go to state 71
    EQ_TIMES        shift and go to state 74
    EQ_DIV          shift and go to state 62


state 168

    (91) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    LBRACE          reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE_PLUS     reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE_MINUS    reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASTERISK        reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    EXCLAMATION     reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AMPERSAND       reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INUMBER         reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FNUMBER         reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHARACTER       reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 91 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 169

    (93) iteration_statement -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement
    (49) binary_expression -> expression . ASSIGN expression
    (50) binary_expression -> expression . DOUBLE_PIPE expression
    (51) binary_expression -> expression . DOUBLE_AMPERSAND expression
    (52) binary_expression -> expression . EQ expression
    (53) binary_expression -> expression . NOT_EQ expression
    (54) binary_expression -> expression . LESS expression
    (55) binary_expression -> expression . GREATER expression
    (56) binary_expression -> expression . LESS_EQ expression
    (57) binary_expression -> expression . GREATER_EQ expression
    (58) binary_expression -> expression . PLUS expression
    (59) binary_expression -> expression . MINUS expression
    (60) binary_expression -> expression . ASTERISK expression
    (61) binary_expression -> expression . DIV expression
    (62) binary_expression -> expression . EQ_PLUS expression
    (63) binary_expression -> expression . EQ_MINUS expression
    (64) binary_expression -> expression . EQ_TIMES expression
    (65) binary_expression -> expression . EQ_DIV expression

    RPAREN          shift and go to state 172
    ASSIGN          shift and go to state 79
    DOUBLE_PIPE     shift and go to state 66
    DOUBLE_AMPERSAND shift and go to state 61
    EQ              shift and go to state 63
    NOT_EQ          shift and go to state 70
    LESS            shift and go to state 64
    GREATER         shift and go to state 59
    LESS_EQ         shift and go to state 58
    GREATER_EQ      shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 67
    ASTERISK        shift and go to state 65
    DIV             shift and go to state 73
    EQ_PLUS         shift and go to state 60
    EQ_MINUS        shift and go to state 71
    EQ_TIMES        shift and go to state 74
    EQ_DIV          shift and go to state 62


state 170

    (94) selection_statement -> IF LPAREN expression RPAREN statement .
    (95) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    LBRACE          reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE_PLUS     reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE_MINUS    reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASTERISK        reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    EXCLAMATION     reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AMPERSAND       reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INUMBER         reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FNUMBER         reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHARACTER       reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 173

  ! ELSE            [ reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 171

    (92) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 174


state 172

    (93) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement
    (37) statement -> . compound_statement
    (38) statement -> . jump_statement
    (39) statement -> . iteration_statement
    (40) statement -> . selection_statement
    (41) statement -> . expression_statement
    (42) statement -> . label
    (33) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (34) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (86) jump_statement -> . RETURN SEMICOLON
    (87) jump_statement -> . RETURN expression SEMICOLON
    (88) jump_statement -> . BREAK SEMICOLON
    (89) jump_statement -> . CONTINUE SEMICOLON
    (90) jump_statement -> . GOTO ID SEMICOLON
    (91) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (92) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (93) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (94) selection_statement -> . IF LPAREN expression RPAREN statement
    (95) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (44) expression_statement -> . expression SEMICOLON
    (43) label -> . ID COLON
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    LBRACE          shift and go to state 57
    RETURN          shift and go to state 120
    BREAK           shift and go to state 133
    CONTINUE        shift and go to state 134
    GOTO            shift and go to state 123
    WHILE           shift and go to state 121
    DO              shift and go to state 119
    FOR             shift and go to state 129
    IF              shift and go to state 131
    ID              shift and go to state 130
    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    expression_statement           shift and go to state 118
    jump_statement                 shift and go to state 132
    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    compound_statement             shift and go to state 124
    iteration_statement            shift and go to state 122
    selection_statement            shift and go to state 125
    postfix_expression             shift and go to state 23
    label                          shift and go to state 126
    primary_expression             shift and go to state 28
    statement                      shift and go to state 175
    expression                     shift and go to state 136
    string_literal                 shift and go to state 21

state 173

    (95) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (37) statement -> . compound_statement
    (38) statement -> . jump_statement
    (39) statement -> . iteration_statement
    (40) statement -> . selection_statement
    (41) statement -> . expression_statement
    (42) statement -> . label
    (33) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (34) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (86) jump_statement -> . RETURN SEMICOLON
    (87) jump_statement -> . RETURN expression SEMICOLON
    (88) jump_statement -> . BREAK SEMICOLON
    (89) jump_statement -> . CONTINUE SEMICOLON
    (90) jump_statement -> . GOTO ID SEMICOLON
    (91) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (92) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (93) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (94) selection_statement -> . IF LPAREN expression RPAREN statement
    (95) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (44) expression_statement -> . expression SEMICOLON
    (43) label -> . ID COLON
    (45) expression -> . binary_expression
    (46) expression -> . unary_expression
    (47) expression -> . primary_expression
    (48) expression -> . postfix_expression
    (49) binary_expression -> . expression ASSIGN expression
    (50) binary_expression -> . expression DOUBLE_PIPE expression
    (51) binary_expression -> . expression DOUBLE_AMPERSAND expression
    (52) binary_expression -> . expression EQ expression
    (53) binary_expression -> . expression NOT_EQ expression
    (54) binary_expression -> . expression LESS expression
    (55) binary_expression -> . expression GREATER expression
    (56) binary_expression -> . expression LESS_EQ expression
    (57) binary_expression -> . expression GREATER_EQ expression
    (58) binary_expression -> . expression PLUS expression
    (59) binary_expression -> . expression MINUS expression
    (60) binary_expression -> . expression ASTERISK expression
    (61) binary_expression -> . expression DIV expression
    (62) binary_expression -> . expression EQ_PLUS expression
    (63) binary_expression -> . expression EQ_MINUS expression
    (64) binary_expression -> . expression EQ_TIMES expression
    (65) binary_expression -> . expression EQ_DIV expression
    (66) unary_expression -> . PLUS expression
    (67) unary_expression -> . DOUBLE_PLUS primary_expression
    (68) unary_expression -> . primary_expression DOUBLE_PLUS
    (69) unary_expression -> . DOUBLE_MINUS primary_expression
    (70) unary_expression -> . primary_expression DOUBLE_MINUS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . ASTERISK expression
    (73) unary_expression -> . EXCLAMATION expression
    (74) unary_expression -> . AMPERSAND expression
    (79) primary_expression -> . ID
    (80) primary_expression -> . INUMBER
    (81) primary_expression -> . FNUMBER
    (82) primary_expression -> . CHARACTER
    (83) primary_expression -> . string_literal
    (84) primary_expression -> . LPAREN expression RPAREN
    (75) postfix_expression -> . primary_expression LPAREN argument_expression_list RPAREN
    (76) postfix_expression -> . primary_expression LPAREN RPAREN
    (85) string_literal -> . STRING

    LBRACE          shift and go to state 57
    RETURN          shift and go to state 120
    BREAK           shift and go to state 133
    CONTINUE        shift and go to state 134
    GOTO            shift and go to state 123
    WHILE           shift and go to state 121
    DO              shift and go to state 119
    FOR             shift and go to state 129
    IF              shift and go to state 131
    ID              shift and go to state 130
    PLUS            shift and go to state 24
    DOUBLE_PLUS     shift and go to state 36
    DOUBLE_MINUS    shift and go to state 22
    MINUS           shift and go to state 20
    ASTERISK        shift and go to state 40
    EXCLAMATION     shift and go to state 16
    AMPERSAND       shift and go to state 27
    INUMBER         shift and go to state 33
    FNUMBER         shift and go to state 31
    CHARACTER       shift and go to state 18
    LPAREN          shift and go to state 29
    STRING          shift and go to state 19

    jump_statement                 shift and go to state 132
    expression_statement           shift and go to state 118
    binary_expression              shift and go to state 32
    unary_expression               shift and go to state 17
    compound_statement             shift and go to state 124
    expression                     shift and go to state 136
    selection_statement            shift and go to state 125
    postfix_expression             shift and go to state 23
    label                          shift and go to state 126
    primary_expression             shift and go to state 28
    statement                      shift and go to state 176
    iteration_statement            shift and go to state 122
    string_literal                 shift and go to state 21

state 174

    (92) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .

    LBRACE          reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    GOTO            reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    PLUS            reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLE_PLUS     reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLE_MINUS    reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ASTERISK        reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    EXCLAMATION     reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    AMPERSAND       reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INUMBER         reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FNUMBER         reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CHARACTER       reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING          reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 92 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)


state 175

    (93) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .

    LBRACE          reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CONTINUE        reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    GOTO            reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DO              reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FOR             reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IF              reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ID              reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    PLUS            reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DOUBLE_PLUS     reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DOUBLE_MINUS    reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MINUS           reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ASTERISK        reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    EXCLAMATION     reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    AMPERSAND       reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INUMBER         reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FNUMBER         reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CHARACTER       reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STRING          reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RBRACE          reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 93 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)


state 176

    (95) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    LBRACE          reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE_PLUS     reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE_MINUS    reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASTERISK        reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    EXCLAMATION     reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AMPERSAND       reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INUMBER         reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FNUMBER         reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHARACTER       reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 170 resolved as shift
WARNING: reduce/reduce conflict in state 30 resolved using rule (direct_declarator -> ID)
WARNING: rejected rule (primary_expression -> ID)
WARNING: reduce/reduce conflict in state 92 resolved using rule (declaration_list -> declaration)
WARNING: rejected rule (empty -> <empty>)
WARNING: reduce/reduce conflict in state 92 resolved using rule (declaration_list -> declaration)
WARNING: rejected rule (empty -> <empty>)
WARNING: reduce/reduce conflict in state 92 resolved using rule (declaration_list -> declaration)
WARNING: rejected rule (empty -> <empty>)
WARNING: reduce/reduce conflict in state 92 resolved using rule (declaration_list -> declaration)
WARNING: rejected rule (empty -> <empty>)
WARNING: reduce/reduce conflict in state 92 resolved using rule (declaration_list -> declaration)
WARNING: rejected rule (empty -> <empty>)
WARNING: reduce/reduce conflict in state 92 resolved using rule (declaration_list -> declaration)
WARNING: rejected rule (empty -> <empty>)
WARNING: reduce/reduce conflict in state 92 resolved using rule (declaration_list -> declaration)
WARNING: rejected rule (empty -> <empty>)
WARNING: reduce/reduce conflict in state 92 resolved using rule (declaration_list -> declaration)
WARNING: rejected rule (empty -> <empty>)
WARNING: reduce/reduce conflict in state 92 resolved using rule (declaration_list -> declaration)
WARNING: rejected rule (empty -> <empty>)
WARNING: reduce/reduce conflict in state 92 resolved using rule (declaration_list -> declaration)
WARNING: rejected rule (empty -> <empty>)
WARNING: reduce/reduce conflict in state 92 resolved using rule (declaration_list -> declaration)
WARNING: rejected rule (empty -> <empty>)
WARNING: reduce/reduce conflict in state 92 resolved using rule (declaration_list -> declaration)
WARNING: rejected rule (empty -> <empty>)
WARNING: reduce/reduce conflict in state 92 resolved using rule (declaration_list -> declaration)
WARNING: rejected rule (empty -> <empty>)
WARNING: reduce/reduce conflict in state 93 resolved using rule (declaration_list_opt -> empty)
WARNING: rejected rule (type_specifier -> empty)
WARNING: reduce/reduce conflict in state 93 resolved using rule (declaration_list_opt -> empty)
WARNING: rejected rule (type_specifier -> empty)
WARNING: reduce/reduce conflict in state 93 resolved using rule (declaration_list_opt -> empty)
WARNING: rejected rule (type_specifier -> empty)
WARNING: reduce/reduce conflict in state 93 resolved using rule (declaration_list_opt -> empty)
WARNING: rejected rule (type_specifier -> empty)
WARNING: reduce/reduce conflict in state 93 resolved using rule (declaration_list_opt -> empty)
WARNING: rejected rule (type_specifier -> empty)
WARNING: reduce/reduce conflict in state 93 resolved using rule (declaration_list_opt -> empty)
WARNING: rejected rule (type_specifier -> empty)
WARNING: reduce/reduce conflict in state 93 resolved using rule (declaration_list_opt -> empty)
WARNING: rejected rule (type_specifier -> empty)
WARNING: reduce/reduce conflict in state 93 resolved using rule (declaration_list_opt -> empty)
WARNING: rejected rule (type_specifier -> empty)
WARNING: reduce/reduce conflict in state 93 resolved using rule (declaration_list_opt -> empty)
WARNING: rejected rule (type_specifier -> empty)
WARNING: reduce/reduce conflict in state 93 resolved using rule (declaration_list_opt -> empty)
WARNING: rejected rule (type_specifier -> empty)
WARNING: reduce/reduce conflict in state 93 resolved using rule (declaration_list_opt -> empty)
WARNING: rejected rule (type_specifier -> empty)
WARNING: reduce/reduce conflict in state 93 resolved using rule (declaration_list_opt -> empty)
WARNING: rejected rule (type_specifier -> empty)
WARNING: reduce/reduce conflict in state 93 resolved using rule (declaration_list_opt -> empty)
WARNING: rejected rule (type_specifier -> empty)
